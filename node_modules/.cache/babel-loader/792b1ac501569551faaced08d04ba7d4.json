{"ast":null,"code":"/**\n * Unwrap a coordinate from a Feature with a Point geometry, a Point\n * geometry, or a single coordinate.\n *\n * @param {*} obj any value\n * @returns {Array<number>} a coordinate\n */\nfunction getCoord(obj) {\n  if (Array.isArray(obj) && typeof obj[0] === 'number' && typeof obj[1] === 'number') {\n    return obj;\n  } else if (obj) {\n    if (obj.type === 'Feature' && obj.geometry && obj.geometry.type === 'Point' && Array.isArray(obj.geometry.coordinates)) {\n      return obj.geometry.coordinates;\n    } else if (obj.type === 'Point' && Array.isArray(obj.coordinates)) {\n      return obj.coordinates;\n    }\n  }\n\n  throw new Error('A coordinate, feature, or point geometry is required');\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @alias geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\n\n\nfunction geojsonType(value, type, name) {\n  if (!type || !name) throw new Error('type and name required');\n\n  if (!value || value.type !== type) {\n    throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n  }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\n\n\nfunction featureOf(feature, type, name) {\n  if (!name) throw new Error('.featureOf() requires a name');\n\n  if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n    throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n  }\n\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n  }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias collectionOf\n * @param {FeatureCollection} featurecollection a featurecollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\n\n\nfunction collectionOf(featurecollection, type, name) {\n  if (!name) throw new Error('.collectionOf() requires a name');\n\n  if (!featurecollection || featurecollection.type !== 'FeatureCollection') {\n    throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n  }\n\n  for (var i = 0; i < featurecollection.features.length; i++) {\n    var feature = featurecollection.features[i];\n\n    if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n      throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n    }\n  }\n}\n\nmodule.exports.geojsonType = geojsonType;\nmodule.exports.collectionOf = collectionOf;\nmodule.exports.featureOf = featureOf;\nmodule.exports.getCoord = getCoord;","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-invariant/index.js"],"names":["getCoord","obj","Array","isArray","type","geometry","coordinates","Error","geojsonType","value","name","featureOf","feature","collectionOf","featurecollection","i","features","length","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,KACA,OAAOA,GAAG,CAAC,CAAD,CAAV,KAAkB,QADlB,IAEA,OAAOA,GAAG,CAAC,CAAD,CAAV,KAAkB,QAFtB,EAEgC;AAC5B,WAAOA,GAAP;AACH,GAJD,MAIO,IAAIA,GAAJ,EAAS;AACZ,QAAIA,GAAG,CAACG,IAAJ,KAAa,SAAb,IACAH,GAAG,CAACI,QADJ,IAEAJ,GAAG,CAACI,QAAJ,CAAaD,IAAb,KAAsB,OAFtB,IAGAF,KAAK,CAACC,OAAN,CAAcF,GAAG,CAACI,QAAJ,CAAaC,WAA3B,CAHJ,EAG6C;AACzC,aAAOL,GAAG,CAACI,QAAJ,CAAaC,WAApB;AACH,KALD,MAKO,IAAIL,GAAG,CAACG,IAAJ,KAAa,OAAb,IACPF,KAAK,CAACC,OAAN,CAAcF,GAAG,CAACK,WAAlB,CADG,EAC6B;AAChC,aAAOL,GAAG,CAACK,WAAX;AACH;AACJ;;AACD,QAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4BL,IAA5B,EAAkCM,IAAlC,EAAwC;AACpC,MAAI,CAACN,IAAD,IAAS,CAACM,IAAd,EAAoB,MAAM,IAAIH,KAAJ,CAAU,wBAAV,CAAN;;AAEpB,MAAI,CAACE,KAAD,IAAUA,KAAK,CAACL,IAAN,KAAeA,IAA7B,EAAmC;AAC/B,UAAM,IAAIG,KAAJ,CAAU,sBAAsBG,IAAtB,GAA6B,cAA7B,GAA8CN,IAA9C,GAAqD,UAArD,GAAkEK,KAAK,CAACL,IAAlF,CAAN;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,SAAT,CAAmBC,OAAnB,EAA4BR,IAA5B,EAAkCM,IAAlC,EAAwC;AACpC,MAAI,CAACA,IAAL,EAAW,MAAM,IAAIH,KAAJ,CAAU,8BAAV,CAAN;;AACX,MAAI,CAACK,OAAD,IAAYA,OAAO,CAACR,IAAR,KAAiB,SAA7B,IAA0C,CAACQ,OAAO,CAACP,QAAvD,EAAiE;AAC7D,UAAM,IAAIE,KAAJ,CAAU,sBAAsBG,IAAtB,GAA6B,kCAAvC,CAAN;AACH;;AACD,MAAI,CAACE,OAAO,CAACP,QAAT,IAAqBO,OAAO,CAACP,QAAR,CAAiBD,IAAjB,KAA0BA,IAAnD,EAAyD;AACrD,UAAM,IAAIG,KAAJ,CAAU,sBAAsBG,IAAtB,GAA6B,cAA7B,GAA8CN,IAA9C,GAAqD,UAArD,GAAkEQ,OAAO,CAACP,QAAR,CAAiBD,IAA7F,CAAN;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,YAAT,CAAsBC,iBAAtB,EAAyCV,IAAzC,EAA+CM,IAA/C,EAAqD;AACjD,MAAI,CAACA,IAAL,EAAW,MAAM,IAAIH,KAAJ,CAAU,iCAAV,CAAN;;AACX,MAAI,CAACO,iBAAD,IAAsBA,iBAAiB,CAACV,IAAlB,KAA2B,mBAArD,EAA0E;AACtE,UAAM,IAAIG,KAAJ,CAAU,sBAAsBG,IAAtB,GAA6B,8BAAvC,CAAN;AACH;;AACD,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,iBAAiB,CAACE,QAAlB,CAA2BC,MAA/C,EAAuDF,CAAC,EAAxD,EAA4D;AACxD,QAAIH,OAAO,GAAGE,iBAAiB,CAACE,QAAlB,CAA2BD,CAA3B,CAAd;;AACA,QAAI,CAACH,OAAD,IAAYA,OAAO,CAACR,IAAR,KAAiB,SAA7B,IAA0C,CAACQ,OAAO,CAACP,QAAvD,EAAiE;AAC7D,YAAM,IAAIE,KAAJ,CAAU,sBAAsBG,IAAtB,GAA6B,kCAAvC,CAAN;AACH;;AACD,QAAI,CAACE,OAAO,CAACP,QAAT,IAAqBO,OAAO,CAACP,QAAR,CAAiBD,IAAjB,KAA0BA,IAAnD,EAAyD;AACrD,YAAM,IAAIG,KAAJ,CAAU,sBAAsBG,IAAtB,GAA6B,cAA7B,GAA8CN,IAA9C,GAAqD,UAArD,GAAkEQ,OAAO,CAACP,QAAR,CAAiBD,IAA7F,CAAN;AACH;AACJ;AACJ;;AAEDc,MAAM,CAACC,OAAP,CAAeX,WAAf,GAA6BA,WAA7B;AACAU,MAAM,CAACC,OAAP,CAAeN,YAAf,GAA8BA,YAA9B;AACAK,MAAM,CAACC,OAAP,CAAeR,SAAf,GAA2BA,SAA3B;AACAO,MAAM,CAACC,OAAP,CAAenB,QAAf,GAA0BA,QAA1B","sourcesContent":["/**\n * Unwrap a coordinate from a Feature with a Point geometry, a Point\n * geometry, or a single coordinate.\n *\n * @param {*} obj any value\n * @returns {Array<number>} a coordinate\n */\nfunction getCoord(obj) {\n    if (Array.isArray(obj) &&\n        typeof obj[0] === 'number' &&\n        typeof obj[1] === 'number') {\n        return obj;\n    } else if (obj) {\n        if (obj.type === 'Feature' &&\n            obj.geometry &&\n            obj.geometry.type === 'Point' &&\n            Array.isArray(obj.geometry.coordinates)) {\n            return obj.geometry.coordinates;\n        } else if (obj.type === 'Point' &&\n            Array.isArray(obj.coordinates)) {\n            return obj.coordinates;\n        }\n    }\n    throw new Error('A coordinate, feature, or point geometry is required');\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @alias geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) throw new Error('type and name required');\n\n    if (!value || value.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!name) throw new Error('.featureOf() requires a name');\n    if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n        throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias collectionOf\n * @param {FeatureCollection} featurecollection a featurecollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featurecollection, type, name) {\n    if (!name) throw new Error('.collectionOf() requires a name');\n    if (!featurecollection || featurecollection.type !== 'FeatureCollection') {\n        throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n    }\n    for (var i = 0; i < featurecollection.features.length; i++) {\n        var feature = featurecollection.features[i];\n        if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n            throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n        }\n    }\n}\n\nmodule.exports.geojsonType = geojsonType;\nmodule.exports.collectionOf = collectionOf;\nmodule.exports.featureOf = featureOf;\nmodule.exports.getCoord = getCoord;\n"]},"metadata":{},"sourceType":"script"}