{"ast":null,"code":"var measureDistance = require('turf-distance');\n\nvar point = require('turf-helpers').point;\n\nvar bearing = require('turf-bearing');\n\nvar destination = require('turf-destination');\n/**\n * Takes a {@link LineString|line} and returns a {@link Point|point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {String} [units=miles] can be degrees, radians, miles, or kilometers\n * @return {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var along = turf.along(line, 1, 'miles');\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, along]\n * };\n *\n * //=result\n */\n\n\nmodule.exports = function (line, distance, units) {\n  var coords;\n  if (line.type === 'Feature') coords = line.geometry.coordinates;else if (line.type === 'LineString') coords = line.coordinates;else throw new Error('input must be a LineString Feature or Geometry');\n  var travelled = 0;\n\n  for (var i = 0; i < coords.length; i++) {\n    if (distance >= travelled && i === coords.length - 1) break;else if (travelled >= distance) {\n      var overshot = distance - travelled;\n      if (!overshot) return point(coords[i]);else {\n        var direction = bearing(coords[i], coords[i - 1]) - 180;\n        var interpolated = destination(coords[i], overshot, direction, units);\n        return interpolated;\n      }\n    } else {\n      travelled += measureDistance(coords[i], coords[i + 1], units);\n    }\n  }\n\n  return point(coords[coords.length - 1]);\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-along/index.js"],"names":["measureDistance","require","point","bearing","destination","module","exports","line","distance","units","coords","type","geometry","coordinates","Error","travelled","i","length","overshot","direction","interpolated"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,eAAD,CAA7B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBC,KAApC;;AACA,IAAIC,OAAO,GAAGF,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,kBAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiC;AAC9C,MAAIC,MAAJ;AACA,MAAIH,IAAI,CAACI,IAAL,KAAc,SAAlB,EAA6BD,MAAM,GAAGH,IAAI,CAACK,QAAL,CAAcC,WAAvB,CAA7B,KACK,IAAIN,IAAI,CAACI,IAAL,KAAc,YAAlB,EAAgCD,MAAM,GAAGH,IAAI,CAACM,WAAd,CAAhC,KACA,MAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AAEL,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,QAAIR,QAAQ,IAAIO,SAAZ,IAAyBC,CAAC,KAAKN,MAAM,CAACO,MAAP,GAAgB,CAAnD,EAAsD,MAAtD,KACK,IAAIF,SAAS,IAAIP,QAAjB,EAA2B;AAC5B,UAAIU,QAAQ,GAAGV,QAAQ,GAAGO,SAA1B;AACA,UAAI,CAACG,QAAL,EAAe,OAAOhB,KAAK,CAACQ,MAAM,CAACM,CAAD,CAAP,CAAZ,CAAf,KACK;AACD,YAAIG,SAAS,GAAGhB,OAAO,CAACO,MAAM,CAACM,CAAD,CAAP,EAAYN,MAAM,CAACM,CAAC,GAAG,CAAL,CAAlB,CAAP,GAAoC,GAApD;AACA,YAAII,YAAY,GAAGhB,WAAW,CAACM,MAAM,CAACM,CAAD,CAAP,EAAYE,QAAZ,EAAsBC,SAAtB,EAAiCV,KAAjC,CAA9B;AACA,eAAOW,YAAP;AACH;AACJ,KARI,MAQE;AACHL,MAAAA,SAAS,IAAIf,eAAe,CAACU,MAAM,CAACM,CAAD,CAAP,EAAYN,MAAM,CAACM,CAAC,GAAG,CAAL,CAAlB,EAA2BP,KAA3B,CAA5B;AACH;AACJ;;AACD,SAAOP,KAAK,CAACQ,MAAM,CAACA,MAAM,CAACO,MAAP,GAAgB,CAAjB,CAAP,CAAZ;AACH,CAtBD","sourcesContent":["var measureDistance = require('turf-distance');\nvar point = require('turf-helpers').point;\nvar bearing = require('turf-bearing');\nvar destination = require('turf-destination');\n\n/**\n * Takes a {@link LineString|line} and returns a {@link Point|point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {String} [units=miles] can be degrees, radians, miles, or kilometers\n * @return {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var along = turf.along(line, 1, 'miles');\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, along]\n * };\n *\n * //=result\n */\nmodule.exports = function (line, distance, units) {\n    var coords;\n    if (line.type === 'Feature') coords = line.geometry.coordinates;\n    else if (line.type === 'LineString') coords = line.coordinates;\n    else throw new Error('input must be a LineString Feature or Geometry');\n\n    var travelled = 0;\n    for (var i = 0; i < coords.length; i++) {\n        if (distance >= travelled && i === coords.length - 1) break;\n        else if (travelled >= distance) {\n            var overshot = distance - travelled;\n            if (!overshot) return point(coords[i]);\n            else {\n                var direction = bearing(coords[i], coords[i - 1]) - 180;\n                var interpolated = destination(coords[i], overshot, direction, units);\n                return interpolated;\n            }\n        } else {\n            travelled += measureDistance(coords[i], coords[i + 1], units);\n        }\n    }\n    return point(coords[coords.length - 1]);\n};\n"]},"metadata":{},"sourceType":"script"}