{"ast":null,"code":"var random = require('geojson-random');\n/**\n * Generates random {@link GeoJSON} data, including {@link Point|Points} and {@link Polygon|Polygons}, for testing\n * and experimentation.\n *\n * @name random\n * @param {String} [type='point'] type of features desired: 'points' or 'polygons'\n * @param {Number} [count=1] how many geometries should be generated.\n * @param {Object} options options relevant to the feature desired. Can include:\n * @param {Array<number>} options.bbox a bounding box inside of which geometries\n * are placed. In the case of {@link Point} features, they are guaranteed to be within this bounds,\n * while {@link Polygon} features have their centroid within the bounds.\n * @param {Number} [options.num_vertices=10] options.vertices the number of vertices added\n * to polygon features.\n * @param {Number} [options.max_radial_length=10] the total number of decimal\n * degrees longitude or latitude that a polygon can extent outwards to\n * from its center.\n * @return {FeatureCollection} generated random features\n * @example\n * var points = turf.random('points', 100, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=points\n *\n * var polygons = turf.random('polygons', 4, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=polygons\n */\n\n\nmodule.exports = function (type, count, options) {\n  options = options || {};\n  count = count || 1;\n\n  switch (type) {\n    case 'point':\n    case 'points':\n    case undefined:\n      return random.point(count, options.bbox);\n\n    case 'polygon':\n    case 'polygons':\n      return random.polygon(count, options.num_vertices, options.max_radial_length, options.bbox);\n\n    default:\n      throw new Error('Unknown type given: valid options are points and polygons');\n  }\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-random/index.js"],"names":["random","require","module","exports","type","count","options","undefined","point","bbox","polygon","num_vertices","max_radial_length","Error"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;AAC7CA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAD,EAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;;AACA,UAAQD,IAAR;AACA,SAAK,OAAL;AACA,SAAK,QAAL;AACA,SAAKG,SAAL;AACI,aAAOP,MAAM,CAACQ,KAAP,CAAaH,KAAb,EAAoBC,OAAO,CAACG,IAA5B,CAAP;;AACJ,SAAK,SAAL;AACA,SAAK,UAAL;AACI,aAAOT,MAAM,CAACU,OAAP,CACCL,KADD,EAECC,OAAO,CAACK,YAFT,EAGCL,OAAO,CAACM,iBAHT,EAICN,OAAO,CAACG,IAJT,CAAP;;AAKJ;AACI,YAAM,IAAII,KAAJ,CAAU,2DAAV,CAAN;AAbJ;AAeH,CAlBD","sourcesContent":["var random = require('geojson-random');\n\n/**\n * Generates random {@link GeoJSON} data, including {@link Point|Points} and {@link Polygon|Polygons}, for testing\n * and experimentation.\n *\n * @name random\n * @param {String} [type='point'] type of features desired: 'points' or 'polygons'\n * @param {Number} [count=1] how many geometries should be generated.\n * @param {Object} options options relevant to the feature desired. Can include:\n * @param {Array<number>} options.bbox a bounding box inside of which geometries\n * are placed. In the case of {@link Point} features, they are guaranteed to be within this bounds,\n * while {@link Polygon} features have their centroid within the bounds.\n * @param {Number} [options.num_vertices=10] options.vertices the number of vertices added\n * to polygon features.\n * @param {Number} [options.max_radial_length=10] the total number of decimal\n * degrees longitude or latitude that a polygon can extent outwards to\n * from its center.\n * @return {FeatureCollection} generated random features\n * @example\n * var points = turf.random('points', 100, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=points\n *\n * var polygons = turf.random('polygons', 4, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=polygons\n */\nmodule.exports = function (type, count, options) {\n    options = options || {};\n    count = count || 1;\n    switch (type) {\n    case 'point':\n    case 'points':\n    case undefined:\n        return random.point(count, options.bbox);\n    case 'polygon':\n    case 'polygons':\n        return random.polygon(\n                count,\n                options.num_vertices,\n                options.max_radial_length,\n                options.bbox);\n    default:\n        throw new Error('Unknown type given: valid options are points and polygons');\n    }\n};\n"]},"metadata":{},"sourceType":"script"}