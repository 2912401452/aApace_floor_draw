{"ast":null,"code":"import { isPointInPolygon } from './math';\n/**\n * 判断点是否在楼梯内部\n * @param point \n * @param floorBaseData \n * @returns \n */\n\nfunction isPointInFloor(point, floorBaseData) {\n  let {\n    shape,\n    holes\n  } = floorBaseData; // console.log('holes', holes)\n\n  for (let i = 0; i < holes.length; i++) {\n    let hole = holes[i]; // console.log('isPointInPolygon(point, hole)', isPointInPolygon(point, hole))\n\n    if (isPointInPolygon(point, hole)) {\n      return false;\n    }\n  } // console.log(isPointInPolygon(point, holes[0]))\n  // console.log(isPointInPolygon(point, shape))\n\n\n  if (isPointInPolygon(point, shape)) {\n    return true;\n  } else {\n    return false;\n  }\n\n  return false;\n}\n\nfunction getDrawTableData(data) {\n  return false;\n}\n\nexport { getDrawTableData, isPointInFloor };","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/src/components/utils.ts"],"names":["isPointInPolygon","isPointInFloor","point","floorBaseData","shape","holes","i","length","hole","getDrawTableData","data"],"mappings":"AACA,SAASA,gBAAT,QAAiC,QAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAAsCC,aAAtC,EAAqE;AACjE,MAAI;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBF,aAAvB,CADiE,CAEjE;;AACA,OAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAK,CAACE,MAAzB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIE,IAAW,GAAGH,KAAK,CAACC,CAAD,CAAvB,CADiC,CAEjC;;AACA,QAAGN,gBAAgB,CAACE,KAAD,EAAQM,IAAR,CAAnB,EAAkC;AAC9B,aAAO,KAAP;AACH;AACJ,GATgE,CAUjE;AACA;;;AACA,MAAGR,gBAAgB,CAACE,KAAD,EAAQE,KAAR,CAAnB,EAAmC;AAC/B,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;;AACD,SAAO,KAAP;AACH;;AAED,SAASK,gBAAT,CAA0BC,IAA1B,EAAuD;AACnD,SAAO,KAAP;AACH;;AAED,SACID,gBADJ,EAEIR,cAFJ","sourcesContent":["import { ITableData, Point, IHole, IFloorBaseData,  } from './IInterface'\nimport { isPointInPolygon } from './math'\n\n/**\n * 判断点是否在楼梯内部\n * @param point \n * @param floorBaseData \n * @returns \n */\nfunction isPointInFloor(point: Point, floorBaseData: IFloorBaseData) {\n    let { shape, holes } = floorBaseData\n    // console.log('holes', holes)\n    for(let i = 0; i < holes.length;i++) {\n        let hole: IHole = holes[i]\n        // console.log('isPointInPolygon(point, hole)', isPointInPolygon(point, hole))\n        if(isPointInPolygon(point, hole)) {\n            return false\n        }\n    }\n    // console.log(isPointInPolygon(point, holes[0]))\n    // console.log(isPointInPolygon(point, shape))\n    if(isPointInPolygon(point, shape)) {\n        return true\n    } else {\n        return false\n    }\n    return false\n}\n\nfunction getDrawTableData(data: ITableData[]): boolean {\n    return false\n}\n\nexport {\n    getDrawTableData,\n    isPointInFloor\n}"]},"metadata":{},"sourceType":"module"}