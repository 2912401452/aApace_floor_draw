{"ast":null,"code":"//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\nvar getCoord = require('turf-invariant').getCoord;\n\nvar helpers = require('turf-helpers');\n\nvar point = helpers.point;\nvar distanceToRadians = helpers.distanceToRadians;\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Feature<Point>} from starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing ranging from -180 to 180\n * @param {String} [units=kilometers] miles, kilometers, degrees, or radians\n * @returns {Feature<Point>} destination point\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.343, 39.984]\n *   }\n * };\n * var distance = 50;\n * var bearing = 90;\n * var units = 'miles';\n *\n * var destination = turf.destination(point, distance, bearing, units);\n * destination.properties['marker-color'] = '#f00';\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [point, destination]\n * };\n *\n * //=result\n */\n\nmodule.exports = function (from, distance, bearing, units) {\n  var degrees2radians = Math.PI / 180;\n  var radians2degrees = 180 / Math.PI;\n  var coordinates1 = getCoord(from);\n  var longitude1 = degrees2radians * coordinates1[0];\n  var latitude1 = degrees2radians * coordinates1[1];\n  var bearing_rad = degrees2radians * bearing;\n  var radians = distanceToRadians(distance, units);\n  var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearing_rad));\n  var longitude2 = longitude1 + Math.atan2(Math.sin(bearing_rad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n  return point([radians2degrees * longitude2, radians2degrees * latitude2]);\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-destination/index.js"],"names":["getCoord","require","helpers","point","distanceToRadians","module","exports","from","distance","bearing","units","degrees2radians","Math","PI","radians2degrees","coordinates1","longitude1","latitude1","bearing_rad","radians","latitude2","asin","sin","cos","longitude2","atan2"],"mappings":"AAAA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BD,QAAzC;;AACA,IAAIE,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAACC,KAApB;AACA,IAAIC,iBAAiB,GAAGF,OAAO,CAACE,iBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0C;AACvD,MAAIC,eAAe,GAAGC,IAAI,CAACC,EAAL,GAAU,GAAhC;AACA,MAAIC,eAAe,GAAG,MAAMF,IAAI,CAACC,EAAjC;AACA,MAAIE,YAAY,GAAGf,QAAQ,CAACO,IAAD,CAA3B;AACA,MAAIS,UAAU,GAAGL,eAAe,GAAGI,YAAY,CAAC,CAAD,CAA/C;AACA,MAAIE,SAAS,GAAGN,eAAe,GAAGI,YAAY,CAAC,CAAD,CAA9C;AACA,MAAIG,WAAW,GAAGP,eAAe,GAAGF,OAApC;AAEA,MAAIU,OAAO,GAAGf,iBAAiB,CAACI,QAAD,EAAWE,KAAX,CAA/B;AAEA,MAAIU,SAAS,GAAGR,IAAI,CAACS,IAAL,CAAUT,IAAI,CAACU,GAAL,CAASL,SAAT,IAAsBL,IAAI,CAACW,GAAL,CAASJ,OAAT,CAAtB,GACtBP,IAAI,CAACW,GAAL,CAASN,SAAT,IAAsBL,IAAI,CAACU,GAAL,CAASH,OAAT,CAAtB,GAA0CP,IAAI,CAACW,GAAL,CAASL,WAAT,CAD9B,CAAhB;AAEA,MAAIM,UAAU,GAAGR,UAAU,GAAGJ,IAAI,CAACa,KAAL,CAAWb,IAAI,CAACU,GAAL,CAASJ,WAAT,IACrCN,IAAI,CAACU,GAAL,CAASH,OAAT,CADqC,GACjBP,IAAI,CAACW,GAAL,CAASN,SAAT,CADM,EAE1BL,IAAI,CAACW,GAAL,CAASJ,OAAT,IAAoBP,IAAI,CAACU,GAAL,CAASL,SAAT,IAAsBL,IAAI,CAACU,GAAL,CAASF,SAAT,CAFhB,CAA9B;AAIA,SAAOjB,KAAK,CAAC,CAACW,eAAe,GAAGU,UAAnB,EAA+BV,eAAe,GAAGM,SAAjD,CAAD,CAAZ;AACH,CAjBD","sourcesContent":["//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\nvar getCoord = require('turf-invariant').getCoord;\nvar helpers = require('turf-helpers');\nvar point = helpers.point;\nvar distanceToRadians = helpers.distanceToRadians;\n\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Feature<Point>} from starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing ranging from -180 to 180\n * @param {String} [units=kilometers] miles, kilometers, degrees, or radians\n * @returns {Feature<Point>} destination point\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.343, 39.984]\n *   }\n * };\n * var distance = 50;\n * var bearing = 90;\n * var units = 'miles';\n *\n * var destination = turf.destination(point, distance, bearing, units);\n * destination.properties['marker-color'] = '#f00';\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [point, destination]\n * };\n *\n * //=result\n */\nmodule.exports = function (from, distance, bearing, units) {\n    var degrees2radians = Math.PI / 180;\n    var radians2degrees = 180 / Math.PI;\n    var coordinates1 = getCoord(from);\n    var longitude1 = degrees2radians * coordinates1[0];\n    var latitude1 = degrees2radians * coordinates1[1];\n    var bearing_rad = degrees2radians * bearing;\n\n    var radians = distanceToRadians(distance, units);\n\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +\n        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearing_rad));\n    var longitude2 = longitude1 + Math.atan2(Math.sin(bearing_rad) *\n        Math.sin(radians) * Math.cos(latitude1),\n        Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n\n    return point([radians2degrees * longitude2, radians2degrees * latitude2]);\n};\n"]},"metadata":{},"sourceType":"script"}