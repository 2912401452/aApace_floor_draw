{"ast":null,"code":"/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} properties properties\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var geometry = {\n *      \"type\": \"Point\",\n *      \"coordinates\": [\n *        67.5,\n *        32.84267363195431\n *      ]\n *    }\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties) {\n  return {\n    type: 'Feature',\n    properties: properties || {},\n    geometry: geometry\n  };\n}\n\nmodule.exports.feature = feature;\n/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @name point\n * @param {number[]} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object=} properties an Object that is used as the {@link Feature}'s\n * properties\n * @returns {Feature<Point>} a Point feature\n * @example\n * var pt1 = turf.point([-75.343, 39.984]);\n *\n * //=pt1\n */\n\nmodule.exports.point = function (coordinates, properties) {\n  if (!Array.isArray(coordinates)) throw new Error('Coordinates must be an array');\n  if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n  return feature({\n    type: 'Point',\n    coordinates: coordinates.slice()\n  }, properties);\n};\n/**\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object=} properties a properties object\n * @returns {Feature<Polygon>} a Polygon feature\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\n * or if a LinearRing of the Polygon does not have matching Positions at the\n * beginning & end.\n * @example\n * var polygon = turf.polygon([[\n *  [-2.275543, 53.464547],\n *  [-2.275543, 53.489271],\n *  [-2.215118, 53.489271],\n *  [-2.215118, 53.464547],\n *  [-2.275543, 53.464547]\n * ]], { name: 'poly1', population: 400});\n *\n * //=polygon\n */\n\n\nmodule.exports.polygon = function (coordinates, properties) {\n  if (!coordinates) throw new Error('No coordinates passed');\n\n  for (var i = 0; i < coordinates.length; i++) {\n    var ring = coordinates[i];\n\n    if (ring.length < 4) {\n      throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n    }\n\n    for (var j = 0; j < ring[ring.length - 1].length; j++) {\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error('First and last Position are not equivalent.');\n      }\n    }\n  }\n\n  return feature({\n    type: 'Polygon',\n    coordinates: coordinates\n  }, properties);\n};\n/**\n * Creates a {@link LineString} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<LineString>} a LineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var linestring1 = turf.lineString([\n *\t[-21.964416, 64.148203],\n *\t[-21.956176, 64.141316],\n *\t[-21.93901, 64.135924],\n *\t[-21.927337, 64.136673]\n * ]);\n * var linestring2 = turf.lineString([\n *\t[-21.929054, 64.127985],\n *\t[-21.912918, 64.134726],\n *\t[-21.916007, 64.141016],\n * \t[-21.930084, 64.14446]\n * ], {name: 'line 1', distance: 145});\n *\n * //=linestring1\n *\n * //=linestring2\n */\n\n\nmodule.exports.lineString = function (coordinates, properties) {\n  if (!coordinates) {\n    throw new Error('No coordinates passed');\n  }\n\n  return feature({\n    type: 'LineString',\n    coordinates: coordinates\n  }, properties);\n};\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var features = [\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\n * ];\n *\n * var fc = turf.featureCollection(features);\n *\n * //=fc\n */\n\n\nmodule.exports.featureCollection = function (features) {\n  return {\n    type: 'FeatureCollection',\n    features: features\n  };\n};\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n *\n */\n\n\nmodule.exports.multiLineString = function (coordinates, properties) {\n  if (!coordinates) {\n    throw new Error('No coordinates passed');\n  }\n\n  return feature({\n    type: 'MultiLineString',\n    coordinates: coordinates\n  }, properties);\n};\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n *\n */\n\n\nmodule.exports.multiPoint = function (coordinates, properties) {\n  if (!coordinates) {\n    throw new Error('No coordinates passed');\n  }\n\n  return feature({\n    type: 'MultiPoint',\n    coordinates: coordinates\n  }, properties);\n};\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]);\n *\n * //=multiPoly\n *\n */\n\n\nmodule.exports.multiPolygon = function (coordinates, properties) {\n  if (!coordinates) {\n    throw new Error('No coordinates passed');\n  }\n\n  return feature({\n    type: 'MultiPolygon',\n    coordinates: coordinates\n  }, properties);\n};\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<{Geometry}>} geometries an array of GeoJSON Geometries\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<GeometryCollection>} a geometrycollection feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometrycollection([[0,0],[10,10]]);\n *\n * //=collection\n */\n\n\nmodule.exports.geometryCollection = function (geometries, properties) {\n  return feature({\n    type: 'GeometryCollection',\n    geometries: geometries\n  }, properties);\n};\n\nvar factors = {\n  miles: 3960,\n  nauticalmiles: 3441.145,\n  degrees: 57.2957795,\n  radians: 1,\n  inches: 250905600,\n  yards: 6969600,\n  meters: 6373000,\n  metres: 6373000,\n  kilometers: 6373,\n  kilometres: 6373\n};\n/*\n * Convert a distance measurement from radians to a more friendly unit.\n *\n * @name radiansToDistance\n * @param {number} distance in radians across the sphere\n * @param {string=kilometers} units: one of miles, nauticalmiles, degrees, radians,\n * inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\n\nmodule.exports.radiansToDistance = function (radians, units) {\n  var factor = factors[units || 'kilometers'];\n\n  if (factor === undefined) {\n    throw new Error('Invalid unit');\n  }\n\n  return radians * factor;\n};\n/*\n * Convert a distance measurement from a real-world unit into radians\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string=kilometers} units: one of miles, nauticalmiles, degrees, radians,\n * inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\n\n\nmodule.exports.distanceToRadians = function (distance, units) {\n  var factor = factors[units || 'kilometers'];\n\n  if (factor === undefined) {\n    throw new Error('Invalid unit');\n  }\n\n  return distance / factor;\n};\n/*\n * Convert a distance measurement from a real-world unit into degrees\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string=kilometers} units: one of miles, nauticalmiles, degrees, radians,\n * inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\n\n\nmodule.exports.distanceToDegrees = function (distance, units) {\n  var factor = factors[units || 'kilometers'];\n\n  if (factor === undefined) {\n    throw new Error('Invalid unit');\n  }\n\n  return distance / factor * 57.2958;\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-helpers/index.js"],"names":["feature","geometry","properties","type","module","exports","point","coordinates","Array","isArray","Error","length","slice","polygon","i","ring","j","lineString","featureCollection","features","multiLineString","multiPoint","multiPolygon","geometryCollection","geometries","factors","miles","nauticalmiles","degrees","radians","inches","yards","meters","metres","kilometers","kilometres","radiansToDistance","units","factor","undefined","distanceToRadians","distance","distanceToDegrees"],"mappings":"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","sourcesContent":["/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} properties properties\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var geometry = {\n *      \"type\": \"Point\",\n *      \"coordinates\": [\n *        67.5,\n *        32.84267363195431\n *      ]\n *    }\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties) {\n    return {\n        type: 'Feature',\n        properties: properties || {},\n        geometry: geometry\n    };\n}\n\nmodule.exports.feature = feature;\n\n/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @name point\n * @param {number[]} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object=} properties an Object that is used as the {@link Feature}'s\n * properties\n * @returns {Feature<Point>} a Point feature\n * @example\n * var pt1 = turf.point([-75.343, 39.984]);\n *\n * //=pt1\n */\nmodule.exports.point = function (coordinates, properties) {\n    if (!Array.isArray(coordinates)) throw new Error('Coordinates must be an array');\n    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n    return feature({\n        type: 'Point',\n        coordinates: coordinates.slice()\n    }, properties);\n};\n\n/**\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object=} properties a properties object\n * @returns {Feature<Polygon>} a Polygon feature\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\n * or if a LinearRing of the Polygon does not have matching Positions at the\n * beginning & end.\n * @example\n * var polygon = turf.polygon([[\n *  [-2.275543, 53.464547],\n *  [-2.275543, 53.489271],\n *  [-2.215118, 53.489271],\n *  [-2.215118, 53.464547],\n *  [-2.275543, 53.464547]\n * ]], { name: 'poly1', population: 400});\n *\n * //=polygon\n */\nmodule.exports.polygon = function (coordinates, properties) {\n\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties);\n};\n\n/**\n * Creates a {@link LineString} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<LineString>} a LineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var linestring1 = turf.lineString([\n *\t[-21.964416, 64.148203],\n *\t[-21.956176, 64.141316],\n *\t[-21.93901, 64.135924],\n *\t[-21.927337, 64.136673]\n * ]);\n * var linestring2 = turf.lineString([\n *\t[-21.929054, 64.127985],\n *\t[-21.912918, 64.134726],\n *\t[-21.916007, 64.141016],\n * \t[-21.930084, 64.14446]\n * ], {name: 'line 1', distance: 145});\n *\n * //=linestring1\n *\n * //=linestring2\n */\nmodule.exports.lineString = function (coordinates, properties) {\n    if (!coordinates) {\n        throw new Error('No coordinates passed');\n    }\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties);\n};\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var features = [\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\n * ];\n *\n * var fc = turf.featureCollection(features);\n *\n * //=fc\n */\nmodule.exports.featureCollection = function (features) {\n    return {\n        type: 'FeatureCollection',\n        features: features\n    };\n};\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n *\n */\nmodule.exports.multiLineString = function (coordinates, properties) {\n    if (!coordinates) {\n        throw new Error('No coordinates passed');\n    }\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties);\n};\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n *\n */\nmodule.exports.multiPoint = function (coordinates, properties) {\n    if (!coordinates) {\n        throw new Error('No coordinates passed');\n    }\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties);\n};\n\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]);\n *\n * //=multiPoly\n *\n */\nmodule.exports.multiPolygon = function (coordinates, properties) {\n    if (!coordinates) {\n        throw new Error('No coordinates passed');\n    }\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties);\n};\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<{Geometry}>} geometries an array of GeoJSON Geometries\n * @param {Object=} properties an Object of key-value pairs to add as properties\n * @returns {Feature<GeometryCollection>} a geometrycollection feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometrycollection([[0,0],[10,10]]);\n *\n * //=collection\n */\nmodule.exports.geometryCollection = function (geometries, properties) {\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties);\n};\n\nvar factors = {\n    miles: 3960,\n    nauticalmiles: 3441.145,\n    degrees: 57.2957795,\n    radians: 1,\n    inches: 250905600,\n    yards: 6969600,\n    meters: 6373000,\n    metres: 6373000,\n    kilometers: 6373,\n    kilometres: 6373\n};\n\n/*\n * Convert a distance measurement from radians to a more friendly unit.\n *\n * @name radiansToDistance\n * @param {number} distance in radians across the sphere\n * @param {string=kilometers} units: one of miles, nauticalmiles, degrees, radians,\n * inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nmodule.exports.radiansToDistance = function (radians, units) {\n    var factor = factors[units || 'kilometers'];\n    if (factor === undefined) {\n        throw new Error('Invalid unit');\n    }\n    return radians * factor;\n};\n\n/*\n * Convert a distance measurement from a real-world unit into radians\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string=kilometers} units: one of miles, nauticalmiles, degrees, radians,\n * inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nmodule.exports.distanceToRadians = function (distance, units) {\n    var factor = factors[units || 'kilometers'];\n    if (factor === undefined) {\n        throw new Error('Invalid unit');\n    }\n    return distance / factor;\n};\n\n/*\n * Convert a distance measurement from a real-world unit into degrees\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string=kilometers} units: one of miles, nauticalmiles, degrees, radians,\n * inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nmodule.exports.distanceToDegrees = function (distance, units) {\n    var factor = factors[units || 'kilometers'];\n    if (factor === undefined) {\n        throw new Error('Invalid unit');\n    }\n    return (distance / factor) * 57.2958;\n};\n"]},"metadata":{},"sourceType":"script"}