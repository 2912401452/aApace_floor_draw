{"ast":null,"code":"var _jsxFileName = \"/Users/yiqianyao/workspace/something/floorcanvas/src/components/index.tsx\";\nimport React from 'react';\nimport { isOnTable, isOnRoom } from './utils';\nimport { floorBaseData, tableData, roomData } from './mock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Plane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.top = void 0;\n    this.left = void 0;\n    this.isFloorSelect = false;\n    this.selectedTableId = null;\n    this.selectedRoomId = null;\n    this.selectColors = {\n      floorFill: '#ff0',\n      floorStroke: '#f00',\n      tableFill: '#f00',\n      tableStroke: '#000',\n      roomFill: '#00f',\n      roomStroke: '#fff'\n    };\n    this.width = 100;\n    this.height = 100;\n    this.top = 0;\n    this.left = 0;\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n  }\n\n  componentDidMount() {\n    this.initProperties();\n    this.draw();\n    this.canvas.addEventListener('click', this.handleClick, false);\n    this.canvas.addEventListener('mousemove', this.handleMouseMove, false);\n  }\n\n  componentWillUnmount() {\n    this.canvas.removeEventListener('click', this.handleClick);\n    this.canvas.removeEventListener('mousemove', this.handleMouseMove);\n  }\n\n  initProperties() {\n    let {\n      width,\n      height\n    } = this.props;\n    this.width = width;\n    this.height = height;\n    this.ctx = this.setCanvas(width, height);\n    let {\n      top,\n      left\n    } = this.canvas.getBoundingClientRect();\n    this.top = top;\n    this.left = left;\n  }\n\n  draw() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.drawFloorBase(this.ctx, floorBaseData, '#00f', '#0ff');\n    this.drawTables(this.ctx, tableData, '#f00', '#0f0');\n    this.drawRooms(this.ctx, roomData, '#f00', '#f00');\n  }\n\n  handleClick(e) {\n    let {\n      clientX,\n      clientY\n    } = e;\n    let x = clientX - this.left;\n    let y = clientY - this.top; // let b = isPointInFloor([x, y], floorBaseData)\n    // console.log(b)\n    // console.log(isOnTable([x, y], tableData))\n  }\n\n  handleMouseMove(e) {\n    let {\n      clientX,\n      clientY\n    } = e;\n    let x = clientX - this.left;\n    let y = clientY - this.top;\n    let testTableResult = isOnTable([x, y], tableData);\n\n    if (testTableResult) {\n      this.selectedTableId = testTableResult.tableid;\n    } else {\n      this.selectedTableId = null;\n    }\n\n    let testRoomResult = isOnRoom([x, y], roomData);\n\n    if (testRoomResult) {\n      this.selectedRoomId = testRoomResult.roomid;\n    } else {\n      this.selectedRoomId = null;\n    }\n\n    this.draw();\n  } // 绘制楼层 - 不需要被选中\n\n\n  drawFloorBase(ctx, floorBaseData, strokeStyle, fillStyle) {\n    let {\n      shape,\n      holes\n    } = floorBaseData;\n    ctx.strokeStyle = strokeStyle;\n    ctx.fillStyle = fillStyle; // draw line\n\n    ctx.beginPath();\n    shape.map(s => {\n      ctx.lineTo(...s);\n    });\n    ctx.lineTo(...shape[0]);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke(); // draw holes\n\n    holes.map(hole => {\n      ctx.beginPath();\n      ctx.save();\n      hole.map(h => {\n        ctx.lineTo(...h);\n      });\n      ctx.lineTo(...hole[0]);\n      ctx.clip();\n      ctx.clearRect(0, 0, this.width, this.height);\n      ctx.closePath();\n      ctx.restore();\n      ctx.stroke();\n    });\n  } // 绘制座位 - 需要被选中\n\n\n  drawTables(ctx, tableData, strokeStyle, fillStyle) {\n    tableData.map(td => {\n      let {\n        shape,\n        tableid\n      } = td;\n      ctx.strokeStyle = this.selectedTableId === tableid ? this.selectColors.tableStroke : strokeStyle;\n      ctx.fillStyle = this.selectedTableId === tableid ? this.selectColors.tableFill : fillStyle; // draw line\n\n      ctx.beginPath();\n      shape.map(s => {\n        ctx.lineTo(...s);\n      });\n      ctx.lineTo(...shape[0]);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n    });\n  }\n\n  drawRooms(ctx, roomData, strokeStyle, fillStyle) {\n    roomData.map(rd => {\n      let {\n        shape,\n        roomid\n      } = rd;\n      ctx.strokeStyle = this.selectedRoomId === roomid ? this.selectColors.roomStroke : strokeStyle;\n      ctx.fillStyle = this.selectedRoomId === roomid ? this.selectColors.roomFill : fillStyle; // draw line\n\n      ctx.beginPath();\n      shape.map(s => {\n        ctx.lineTo(...s);\n      });\n      ctx.lineTo(...shape[0]);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n    });\n  }\n\n  drawBalcany() {}\n\n  setCanvas(width, height) {\n    this.canvas.style.width = width + 'px';\n    this.canvas.style.height = height + 'px';\n    this.canvas.width = width;\n    this.canvas.height = height;\n    return this.canvas.getContext('2d');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: el => this.canvas = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Plane;","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/src/components/index.tsx"],"names":["React","isOnTable","isOnRoom","floorBaseData","tableData","roomData","Plane","Component","constructor","props","canvas","ctx","width","height","top","left","isFloorSelect","selectedTableId","selectedRoomId","selectColors","floorFill","floorStroke","tableFill","tableStroke","roomFill","roomStroke","handleClick","bind","handleMouseMove","componentDidMount","initProperties","draw","addEventListener","componentWillUnmount","removeEventListener","setCanvas","getBoundingClientRect","clearRect","drawFloorBase","drawTables","drawRooms","e","clientX","clientY","x","y","testTableResult","tableid","testRoomResult","roomid","strokeStyle","fillStyle","shape","holes","beginPath","map","s","lineTo","closePath","fill","stroke","hole","save","h","clip","restore","td","rd","drawBalcany","style","getContext","render","el"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    IPlaneProps,\n    IFloorBaseData,\n    Point,\n    ITableData,\n    IRoomData\n} from './IInterface'\nimport { isPointInFloor, isOnTable, isOnRoom } from './utils'\nimport { floorBaseData, tableData, roomData } from './mock'\n\n\nclass Plane extends React.Component<IPlaneProps> {\n    private canvas!: HTMLCanvasElement;\n    private ctx!: CanvasRenderingContext2D;\n    private width: number;\n    private height: number;\n    private top: number;\n    private left: number;\n    private isFloorSelect: boolean = false;\n    private selectedTableId: string|null = null;\n    private selectedRoomId: string|null = null;\n\n    private selectColors = {\n        floorFill: '#ff0',\n        floorStroke: '#f00',\n        tableFill: '#f00',\n        tableStroke: '#000',\n        roomFill: '#00f',\n        roomStroke: '#fff'\n    }\n\n    constructor(props: IPlaneProps) {\n        super(props)\n        this.width = 100;\n        this.height = 100;\n        this.top = 0;\n        this.left = 0;\n        this.handleClick = this.handleClick.bind(this)\n        this.handleMouseMove = this.handleMouseMove.bind(this)\n    }\n\n    componentDidMount() {\n        this.initProperties()\n        \n        this.draw()\n\n        this.canvas.addEventListener('click', this.handleClick, false)\n        this.canvas.addEventListener('mousemove', this.handleMouseMove, false)\n    }\n\n    componentWillUnmount() {\n        this.canvas.removeEventListener('click', this.handleClick)\n        this.canvas.removeEventListener('mousemove', this.handleMouseMove)\n    }\n\n    initProperties() {\n        let { width, height } = this.props\n        this.width = width \n        this.height = height\n        this.ctx = this.setCanvas(width, height)\n        let { top, left } = this.canvas.getBoundingClientRect()\n        this.top = top\n        this.left = left\n    }\n\n    draw() {\n        this.ctx.clearRect(0, 0, this.width, this.height)\n        this.drawFloorBase(this.ctx, floorBaseData, '#00f', '#0ff')\n        this.drawTables(this.ctx, tableData, '#f00', '#0f0')\n        this.drawRooms(this.ctx, roomData, '#f00', '#f00')\n    }\n\n    handleClick(e: MouseEvent) {\n        let {clientX, clientY} = e\n        let x = clientX - this.left\n        let y = clientY - this.top\n\n        // let b = isPointInFloor([x, y], floorBaseData)\n        // console.log(b)\n\n        // console.log(isOnTable([x, y], tableData))\n    }\n\n    handleMouseMove(e: MouseEvent) {\n        let {clientX, clientY} = e\n        let x = clientX - this.left\n        let y = clientY - this.top\n\n        let testTableResult = isOnTable([x, y], tableData)\n        if(testTableResult) {\n            this.selectedTableId = testTableResult.tableid\n        } else {\n            this.selectedTableId = null\n        }\n\n        let testRoomResult = isOnRoom([x, y], roomData)\n        if(testRoomResult) {\n            this.selectedRoomId = testRoomResult.roomid\n        } else {\n            this.selectedRoomId = null\n        }\n\n        this.draw()\n    }\n\n    // 绘制楼层 - 不需要被选中\n    drawFloorBase(ctx: CanvasRenderingContext2D, floorBaseData: IFloorBaseData, strokeStyle: string, fillStyle: string) {\n        let { shape, holes } = floorBaseData\n\n        ctx.strokeStyle = strokeStyle\n        ctx.fillStyle = fillStyle\n\n        // draw line\n        ctx.beginPath()\n        shape.map((s: Point): void => {\n            ctx.lineTo(...s)\n        })\n        ctx.lineTo(...shape[0])\n        ctx.closePath()\n        ctx.fill()\n        ctx.stroke()\n\n        // draw holes\n        holes.map(hole => {\n            ctx.beginPath()\n            ctx.save()\n\n            hole.map((h: Point) => {\n                ctx.lineTo(...h)\n            })\n            ctx.lineTo(...hole[0])\n\n            ctx.clip()\n            ctx.clearRect(0, 0, this.width, this.height)\n            \n            ctx.closePath()\n            ctx.restore()\n            ctx.stroke()\n        })\n    }\n\n    // 绘制座位 - 需要被选中\n    drawTables(ctx: CanvasRenderingContext2D, tableData: ITableData[], strokeStyle: string, fillStyle: string) {\n        tableData.map((td: ITableData) => {\n            let { shape, tableid } = td\n      \n            ctx.strokeStyle = this.selectedTableId===tableid?this.selectColors.tableStroke:strokeStyle\n            ctx.fillStyle = this.selectedTableId===tableid?this.selectColors.tableFill:fillStyle\n            // draw line\n            ctx.beginPath()\n            shape.map((s: Point): void => {\n                ctx.lineTo(...s)\n            })\n            ctx.lineTo(...shape[0])\n            ctx.closePath()\n            ctx.fill()\n            ctx.stroke()\n        })\n    }\n\n    drawRooms(ctx: CanvasRenderingContext2D, roomData: IRoomData[], strokeStyle: string, fillStyle: string) {\n        roomData.map((rd: IRoomData) => {\n            let { shape, roomid } = rd\n\n            ctx.strokeStyle = this.selectedRoomId===roomid?this.selectColors.roomStroke:strokeStyle\n            ctx.fillStyle = this.selectedRoomId===roomid?this.selectColors.roomFill:fillStyle\n            // draw line\n            ctx.beginPath()\n            shape.map((s: Point): void => {\n                ctx.lineTo(...s)\n            })\n            ctx.lineTo(...shape[0])\n            ctx.closePath()\n            ctx.fill()\n            ctx.stroke()\n        })\n    }\n\n    drawBalcany() {\n        \n    }\n\n    setCanvas(width: number, height: number): CanvasRenderingContext2D {\n        this.canvas.style.width = width + 'px'\n        this.canvas.style.height = height + 'px'\n        this.canvas.width = width\n        this.canvas.height = height\n        return this.canvas.getContext('2d') as CanvasRenderingContext2D\n    }\n\n    render() {\n        return <canvas ref={el=>this.canvas = el as HTMLCanvasElement}></canvas>\n    }\n}\n\nexport default Plane"]},"metadata":{},"sourceType":"module"}