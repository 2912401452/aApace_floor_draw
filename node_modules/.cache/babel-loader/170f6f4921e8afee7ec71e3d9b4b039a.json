{"ast":null,"code":"var featurecollection = require('turf-helpers').featureCollection;\n\nvar point = require('turf-helpers').point;\n\nvar polygon = require('turf-helpers').polygon;\n\nvar distance = require('turf-distance');\n/**\n * Takes a bounding box and a cell depth and returns a set of square {@link Polygon|polygons} in a grid.\n *\n * @name squareGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSize width of each cell\n * @param {string} units units to use for cellWidth\n * @return {FeatureCollection<Polygon>} grid a grid of polygons\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var squareGrid = turf.squareGrid(extent, cellWidth, units);\n *\n * //=squareGrid\n */\n\n\nmodule.exports = function squareGrid(bbox, cellSize, units) {\n  var fc = featurecollection([]);\n  var xFraction = cellSize / distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cellSize / distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n  var currentX = bbox[0];\n\n  while (currentX <= bbox[2]) {\n    var currentY = bbox[1];\n\n    while (currentY <= bbox[3]) {\n      var cellPoly = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]]);\n      fc.features.push(cellPoly);\n      currentY += cellHeight;\n    }\n\n    currentX += cellWidth;\n  }\n\n  return fc;\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-square-grid/index.js"],"names":["featurecollection","require","featureCollection","point","polygon","distance","module","exports","squareGrid","bbox","cellSize","units","fc","xFraction","cellWidth","yFraction","cellHeight","currentX","currentY","cellPoly","features","push"],"mappings":"AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,iBAAhD;;AACA,IAAIC,KAAK,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,KAApC;;AACA,IAAIC,OAAO,GAAGH,OAAO,CAAC,cAAD,CAAP,CAAwBG,OAAtC;;AACA,IAAIC,QAAQ,GAAGJ,OAAO,CAAC,eAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,KAApC,EAA2C;AACxD,MAAIC,EAAE,GAAGZ,iBAAiB,CAAC,EAAD,CAA1B;AACA,MAAIa,SAAS,GAAGH,QAAQ,GAAIL,QAAQ,CAACF,KAAK,CAAC,CAACM,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAD,CAAN,EAA4BN,KAAK,CAAC,CAACM,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAD,CAAjC,EAAuDE,KAAvD,CAApC;AACA,MAAIG,SAAS,GAAGD,SAAS,IAAIJ,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAlB,CAAzB;AACA,MAAIM,SAAS,GAAGL,QAAQ,GAAIL,QAAQ,CAACF,KAAK,CAAC,CAACM,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAD,CAAN,EAA4BN,KAAK,CAAC,CAACM,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAD,CAAjC,EAAuDE,KAAvD,CAApC;AACA,MAAIK,UAAU,GAAGD,SAAS,IAAIN,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAlB,CAA1B;AAEA,MAAIQ,QAAQ,GAAGR,IAAI,CAAC,CAAD,CAAnB;;AACA,SAAOQ,QAAQ,IAAIR,IAAI,CAAC,CAAD,CAAvB,EAA4B;AACxB,QAAIS,QAAQ,GAAGT,IAAI,CAAC,CAAD,CAAnB;;AACA,WAAOS,QAAQ,IAAIT,IAAI,CAAC,CAAD,CAAvB,EAA4B;AACxB,UAAIU,QAAQ,GAAGf,OAAO,CAAC,CAAC,CACpB,CAACa,QAAD,EAAWC,QAAX,CADoB,EAEpB,CAACD,QAAD,EAAWC,QAAQ,GAAGF,UAAtB,CAFoB,EAGpB,CAACC,QAAQ,GAAGH,SAAZ,EAAuBI,QAAQ,GAAGF,UAAlC,CAHoB,EAIpB,CAACC,QAAQ,GAAGH,SAAZ,EAAuBI,QAAvB,CAJoB,EAKpB,CAACD,QAAD,EAAWC,QAAX,CALoB,CAAD,CAAD,CAAtB;AAOAN,MAAAA,EAAE,CAACQ,QAAH,CAAYC,IAAZ,CAAiBF,QAAjB;AAEAD,MAAAA,QAAQ,IAAIF,UAAZ;AACH;;AACDC,IAAAA,QAAQ,IAAIH,SAAZ;AACH;;AAED,SAAOF,EAAP;AACH,CA1BD","sourcesContent":["var featurecollection = require('turf-helpers').featureCollection;\nvar point = require('turf-helpers').point;\nvar polygon = require('turf-helpers').polygon;\nvar distance = require('turf-distance');\n\n/**\n * Takes a bounding box and a cell depth and returns a set of square {@link Polygon|polygons} in a grid.\n *\n * @name squareGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSize width of each cell\n * @param {string} units units to use for cellWidth\n * @return {FeatureCollection<Polygon>} grid a grid of polygons\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var squareGrid = turf.squareGrid(extent, cellWidth, units);\n *\n * //=squareGrid\n */\nmodule.exports = function squareGrid(bbox, cellSize, units) {\n    var fc = featurecollection([]);\n    var xFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n    var currentX = bbox[0];\n    while (currentX <= bbox[2]) {\n        var currentY = bbox[1];\n        while (currentY <= bbox[3]) {\n            var cellPoly = polygon([[\n                [currentX, currentY],\n                [currentX, currentY + cellHeight],\n                [currentX + cellWidth, currentY + cellHeight],\n                [currentX + cellWidth, currentY],\n                [currentX, currentY]\n            ]]);\n            fc.features.push(cellPoly);\n\n            currentY += cellHeight;\n        }\n        currentX += cellWidth;\n    }\n\n    return fc;\n};\n"]},"metadata":{},"sourceType":"script"}