{"ast":null,"code":"var inside = require('turf-inside');\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon>} polygons input polygons\n * @param {string} field property in `polygons` to add to joined Point features\n * @param {string} outField property in `points` in which to store joined property from `polygons\n * @return {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var bbox = [0, 0, 10, 10];\n * // create a triangular grid of polygons\n * var triangleGrid = turf.triangleGrid(bbox, 50, 'miles');\n * triangleGrid.features.forEach(function(f) {\n *   f.properties.fill = '#' +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16);\n *   f.properties.stroke = 0;\n *   f.properties['fill-opacity'] = 1;\n * });\n * var randomPoints = turf.random('point', 30, {\n *   bbox: bbox\n * });\n * var both = turf.featurecollection(\n *   triangleGrid.features.concat(randomPoints.features));\n *\n * //=both\n *\n * var tagged = turf.tag(randomPoints, triangleGrid,\n *                       'fill', 'marker-color');\n *\n * //=tagged\n */\n\n\nmodule.exports = function (points, polygons, field, outField) {\n  // prevent mutations\n  points = JSON.parse(JSON.stringify(points));\n  polygons = JSON.parse(JSON.stringify(polygons));\n  points.features.forEach(function (pt) {\n    if (!pt.properties) {\n      pt.properties = {};\n    }\n\n    polygons.features.forEach(function (poly) {\n      if (pt.properties[outField] === undefined) {\n        var isInside = inside(pt, poly);\n\n        if (isInside) {\n          pt.properties[outField] = poly.properties[field];\n        }\n      }\n    });\n  });\n  return points;\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-tag/index.js"],"names":["inside","require","module","exports","points","polygons","field","outField","JSON","parse","stringify","features","forEach","pt","properties","poly","undefined","isInside"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,KAA5B,EAAmCC,QAAnC,EAA6C;AAC1D;AACAH,EAAAA,MAAM,GAAGI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,MAAf,CAAX,CAAT;AACAC,EAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,QAAf,CAAX,CAAX;AACAD,EAAAA,MAAM,CAACO,QAAP,CAAgBC,OAAhB,CAAwB,UAAUC,EAAV,EAAc;AAClC,QAAI,CAACA,EAAE,CAACC,UAAR,EAAoB;AAChBD,MAAAA,EAAE,CAACC,UAAH,GAAgB,EAAhB;AACH;;AACDT,IAAAA,QAAQ,CAACM,QAAT,CAAkBC,OAAlB,CAA0B,UAAUG,IAAV,EAAgB;AACtC,UAAIF,EAAE,CAACC,UAAH,CAAcP,QAAd,MAA4BS,SAAhC,EAA2C;AACvC,YAAIC,QAAQ,GAAGjB,MAAM,CAACa,EAAD,EAAKE,IAAL,CAArB;;AACA,YAAIE,QAAJ,EAAc;AACVJ,UAAAA,EAAE,CAACC,UAAH,CAAcP,QAAd,IAA0BQ,IAAI,CAACD,UAAL,CAAgBR,KAAhB,CAA1B;AACH;AACJ;AACJ,KAPD;AAQH,GAZD;AAaA,SAAOF,MAAP;AACH,CAlBD","sourcesContent":["var inside = require('turf-inside');\n\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon>} polygons input polygons\n * @param {string} field property in `polygons` to add to joined Point features\n * @param {string} outField property in `points` in which to store joined property from `polygons\n * @return {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var bbox = [0, 0, 10, 10];\n * // create a triangular grid of polygons\n * var triangleGrid = turf.triangleGrid(bbox, 50, 'miles');\n * triangleGrid.features.forEach(function(f) {\n *   f.properties.fill = '#' +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16);\n *   f.properties.stroke = 0;\n *   f.properties['fill-opacity'] = 1;\n * });\n * var randomPoints = turf.random('point', 30, {\n *   bbox: bbox\n * });\n * var both = turf.featurecollection(\n *   triangleGrid.features.concat(randomPoints.features));\n *\n * //=both\n *\n * var tagged = turf.tag(randomPoints, triangleGrid,\n *                       'fill', 'marker-color');\n *\n * //=tagged\n */\nmodule.exports = function (points, polygons, field, outField) {\n    // prevent mutations\n    points = JSON.parse(JSON.stringify(points));\n    polygons = JSON.parse(JSON.stringify(polygons));\n    points.features.forEach(function (pt) {\n        if (!pt.properties) {\n            pt.properties = {};\n        }\n        polygons.features.forEach(function (poly) {\n            if (pt.properties[outField] === undefined) {\n                var isInside = inside(pt, poly);\n                if (isInside) {\n                    pt.properties[outField] = poly.properties[field];\n                }\n            }\n        });\n    });\n    return points;\n};\n"]},"metadata":{},"sourceType":"script"}