{"ast":null,"code":"var _jsxFileName = \"/Users/yiqianyao/workspace/something/floorcanvas/src/components/index.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet floorBaseData = {\n  shape: [[100, 100], [340, 100], [340, 200], [300, 200], [300, 380], [100, 380]],\n  holes: [[[120, 120], [160, 120], [160, 180], [120, 180]], [[120, 220], [140, 220], [140, 240], [120, 240]]]\n};\nlet tableData = [{\n  user: '315103',\n  tableid: '6-6-201',\n  shape: [[150, 160], [160, 160], [160, 170], [150, 170]]\n}];\n\nclass Plane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.top = void 0;\n    this.left = void 0;\n    this.width = 100;\n    this.height = 100;\n    this.top = 0;\n    this.left = 0;\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    let {\n      width,\n      height\n    } = this.props;\n    this.width = width;\n    this.height = height;\n    this.ctx = this.setCanvas(width, height);\n    let {\n      top,\n      left\n    } = this.canvas.getBoundingClientRect();\n    this.top = top;\n    this.left = left; // console.log(rgb('#00f'))\n\n    this.drawFloorBase(this.ctx, floorBaseData, '#00f', '#0ff');\n    this.canvas.addEventListener('click', this.handleClick, false);\n  }\n\n  componentWillUnmount() {}\n\n  handleClick(e) {\n    let {\n      clientX,\n      clientY\n    } = e;\n    let x = clientX - this.left;\n    let y = clientY - this.top;\n    let rgbData = this.ctx.getImageData(x, y, 1, 1).data;\n    console.log(rgbData); // let b = isPointInPolygon([x, y], floorBaseData.shape)\n    // console.log(b)\n  }\n\n  drawTables() {} // 绘制楼层 - 不需要被选中\n\n\n  drawFloorBase(ctx, floorBaseData, strokeStyle, fillStyle) {\n    let {\n      shape,\n      holes\n    } = floorBaseData;\n    ctx.strokeStyle = strokeStyle;\n    ctx.fillStyle = fillStyle; // draw line\n\n    ctx.beginPath();\n    shape.map(s => {\n      ctx.lineTo(...s);\n    });\n    ctx.lineTo(...shape[0]);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke(); // draw holes\n\n    holes.map(hole => {\n      ctx.beginPath();\n      ctx.save();\n      hole.map(h => {\n        ctx.lineTo(...h);\n      });\n      ctx.lineTo(...hole[0]);\n      ctx.clip();\n      ctx.clearRect(0, 0, this.width, this.height);\n      ctx.closePath();\n      ctx.restore();\n      ctx.stroke();\n    });\n  }\n\n  drawBalcany() {}\n\n  setCanvas(width, height) {\n    this.canvas.style.width = width + 'px';\n    this.canvas.style.height = height + 'px';\n    this.canvas.width = width;\n    this.canvas.height = height;\n    return this.canvas.getContext('2d');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: el => this.canvas = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Plane;","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/src/components/index.tsx"],"names":["React","floorBaseData","shape","holes","tableData","user","tableid","Plane","Component","constructor","props","canvas","ctx","width","height","top","left","handleClick","bind","componentDidMount","setCanvas","getBoundingClientRect","drawFloorBase","addEventListener","componentWillUnmount","e","clientX","clientY","x","y","rgbData","getImageData","data","console","log","drawTables","strokeStyle","fillStyle","beginPath","map","s","lineTo","closePath","fill","stroke","hole","save","h","clip","clearRect","restore","drawBalcany","style","getContext","render","el"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    IPlaneProps,\n    IFloorBaseData,\n    Point,\n    ITableData\n} from './IInterface'\nimport { rgb } from 'd3'\n\nlet floorBaseData: IFloorBaseData = {\n    shape: [\n        [100, 100], \n        [340, 100],\n        [340, 200],\n        [300, 200],\n        [300, 380],\n        [100, 380],\n    ],\n    holes: [\n        [\n            [120, 120],\n            [160, 120],\n            [160, 180],\n            [120, 180]\n        ],\n        [\n            [120, 220],\n            [140, 220],\n            [140, 240],\n            [120, 240]\n        ]\n    ]\n}\n\nlet tableData: ITableData[] = [\n    {\n        user: '315103',\n        tableid: '6-6-201',\n        shape: [\n            [150, 160],\n            [160, 160],\n            [160, 170],\n            [150, 170]\n        ]\n    }\n]\n\nclass Plane extends React.Component<IPlaneProps> {\n    private canvas!: HTMLCanvasElement;\n    private ctx!: CanvasRenderingContext2D;\n    private width: number;\n    private height: number;\n    private top: number;\n    private left: number;\n\n    constructor(props: IPlaneProps) {\n        super(props)\n        this.width = 100;\n        this.height = 100;\n        this.top = 0;\n        this.left = 0;\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    componentDidMount() {\n        let { width, height } = this.props\n        this.width = width \n        this.height = height\n        this.ctx = this.setCanvas(width, height)\n        let { top, left } = this.canvas.getBoundingClientRect()\n        this.top = top\n        this.left = left\n        \n        // console.log(rgb('#00f'))\n       \n        this.drawFloorBase(this.ctx, floorBaseData, '#00f', '#0ff')\n\n        this.canvas.addEventListener('click', this.handleClick, false)\n     \n    }\n\n    componentWillUnmount() {\n\n    }\n\n    handleClick(e: MouseEvent) {\n        let {clientX, clientY} = e\n        let x = clientX - this.left\n        let y = clientY - this.top\n\n        let rgbData = this.ctx.getImageData(x, y, 1, 1).data\n        console.log(rgbData)\n\n        // let b = isPointInPolygon([x, y], floorBaseData.shape)\n        // console.log(b)\n    }\n\n    drawTables() {\n\n    }\n\n    // 绘制楼层 - 不需要被选中\n    drawFloorBase(ctx: CanvasRenderingContext2D, floorBaseData: IFloorBaseData, strokeStyle: string, fillStyle: string) {\n        let { shape, holes } = floorBaseData\n\n        ctx.strokeStyle = strokeStyle\n        ctx.fillStyle = fillStyle\n\n        // draw line\n        ctx.beginPath()\n        shape.map((s: Point): void => {\n            ctx.lineTo(...s)\n        })\n        ctx.lineTo(...shape[0])\n        ctx.closePath()\n        ctx.fill()\n        ctx.stroke()\n\n        // draw holes\n        holes.map(hole => {\n            ctx.beginPath()\n            ctx.save()\n\n            hole.map((h: Point) => {\n                ctx.lineTo(...h)\n            })\n            ctx.lineTo(...hole[0])\n\n            ctx.clip()\n            ctx.clearRect(0, 0, this.width, this.height)\n            \n            ctx.closePath()\n            ctx.restore()\n            ctx.stroke()\n        })\n    }\n\n    drawBalcany() {\n        \n    }\n\n    setCanvas(width: number, height: number): CanvasRenderingContext2D {\n        this.canvas.style.width = width + 'px'\n        this.canvas.style.height = height + 'px'\n        this.canvas.width = width\n        this.canvas.height = height\n        return this.canvas.getContext('2d') as CanvasRenderingContext2D\n    }\n\n    render() {\n        return <canvas ref={el=>this.canvas = el as HTMLCanvasElement}></canvas>\n    }\n}\n\nexport default Plane"]},"metadata":{},"sourceType":"module"}