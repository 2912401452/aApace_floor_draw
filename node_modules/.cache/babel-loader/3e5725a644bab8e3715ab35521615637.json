{"ast":null,"code":"var featurecollection = require('turf-helpers').featureCollection;\n\nvar polygon = require('turf-helpers').polygon;\n\nvar distance = require('turf-distance');\n/**\n * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.\n *\n * @name triangleGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSize dimension of each cell\n * @param {string} units units to use for cellWidth\n * @return {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var triangleGrid = turf.triangleGrid(extent, cellWidth, units);\n *\n * //=triangleGrid\n */\n\n\nmodule.exports = function (bbox, cellSize, units) {\n  var fc = featurecollection([]);\n  var xFraction = cellSize / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], units);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cellSize / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], units);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n  var xi = 0;\n  var currentX = bbox[0];\n\n  while (currentX <= bbox[2]) {\n    var yi = 0;\n    var currentY = bbox[1];\n\n    while (currentY <= bbox[3]) {\n      if (xi % 2 === 0 && yi % 2 === 0) {\n        fc.features.push(polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]]), polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]]));\n      } else if (xi % 2 === 0 && yi % 2 === 1) {\n        fc.features.push(polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]]), polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]]));\n      } else if (yi % 2 === 0 && xi % 2 === 1) {\n        fc.features.push(polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]]), polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]]));\n      } else if (yi % 2 === 1 && xi % 2 === 1) {\n        fc.features.push(polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]]), polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]]));\n      }\n\n      currentY += cellHeight;\n      yi++;\n    }\n\n    xi++;\n    currentX += cellWidth;\n  }\n\n  return fc;\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-triangle-grid/index.js"],"names":["featurecollection","require","featureCollection","polygon","distance","module","exports","bbox","cellSize","units","fc","xFraction","cellWidth","yFraction","cellHeight","xi","currentX","yi","currentY","features","push"],"mappings":"AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,iBAAhD;;AACA,IAAIC,OAAO,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,OAAtC;;AACA,IAAIC,QAAQ,GAAGH,OAAO,CAAC,eAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiC;AAC9C,MAAIC,EAAE,GAAGV,iBAAiB,CAAC,EAAD,CAA1B;AACA,MAAIW,SAAS,GAAGH,QAAQ,GAAIJ,QAAQ,CAAC,CAACG,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAD,EAAqB,CAACA,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAArB,EAAyCE,KAAzC,CAApC;AACA,MAAIG,SAAS,GAAGD,SAAS,IAAIJ,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAlB,CAAzB;AACA,MAAIM,SAAS,GAAGL,QAAQ,GAAIJ,QAAQ,CAAC,CAACG,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAD,EAAqB,CAACA,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAArB,EAAyCE,KAAzC,CAApC;AACA,MAAIK,UAAU,GAAGD,SAAS,IAAIN,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAlB,CAA1B;AAEA,MAAIQ,EAAE,GAAG,CAAT;AACA,MAAIC,QAAQ,GAAGT,IAAI,CAAC,CAAD,CAAnB;;AACA,SAAOS,QAAQ,IAAIT,IAAI,CAAC,CAAD,CAAvB,EAA4B;AACxB,QAAIU,EAAE,GAAG,CAAT;AACA,QAAIC,QAAQ,GAAGX,IAAI,CAAC,CAAD,CAAnB;;AACA,WAAOW,QAAQ,IAAIX,IAAI,CAAC,CAAD,CAAvB,EAA4B;AACxB,UAAIQ,EAAE,GAAG,CAAL,KAAW,CAAX,IAAgBE,EAAE,GAAG,CAAL,KAAW,CAA/B,EAAkC;AAC9BP,QAAAA,EAAE,CAACS,QAAH,CAAYC,IAAZ,CAAiBjB,OAAO,CAAC,CAAC,CACtB,CAACa,QAAD,EAAWE,QAAX,CADsB,EAEtB,CAACF,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CAFsB,EAGtB,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAvB,CAHsB,EAItB,CAACF,QAAD,EAAWE,QAAX,CAJsB,CAAD,CAAD,CAAxB,EAKKf,OAAO,CAAC,CAAC,CACV,CAACa,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CADU,EAEV,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAQ,GAAGJ,UAAlC,CAFU,EAGV,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAvB,CAHU,EAIV,CAACF,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CAJU,CAAD,CAAD,CALZ;AAWH,OAZD,MAYO,IAAIC,EAAE,GAAG,CAAL,KAAW,CAAX,IAAgBE,EAAE,GAAG,CAAL,KAAW,CAA/B,EAAkC;AACrCP,QAAAA,EAAE,CAACS,QAAH,CAAYC,IAAZ,CAAiBjB,OAAO,CAAC,CAAC,CACtB,CAACa,QAAD,EAAWE,QAAX,CADsB,EAEtB,CAACF,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAQ,GAAGJ,UAAlC,CAFsB,EAGtB,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAvB,CAHsB,EAItB,CAACF,QAAD,EAAWE,QAAX,CAJsB,CAAD,CAAD,CAAxB,EAKKf,OAAO,CAAC,CAAC,CACV,CAACa,QAAD,EAAWE,QAAX,CADU,EAEV,CAACF,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CAFU,EAGV,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAQ,GAAGJ,UAAlC,CAHU,EAIV,CAACE,QAAD,EAAWE,QAAX,CAJU,CAAD,CAAD,CALZ;AAWH,OAZM,MAYA,IAAID,EAAE,GAAG,CAAL,KAAW,CAAX,IAAgBF,EAAE,GAAG,CAAL,KAAW,CAA/B,EAAkC;AACrCL,QAAAA,EAAE,CAACS,QAAH,CAAYC,IAAZ,CAAiBjB,OAAO,CAAC,CAAC,CACtB,CAACa,QAAD,EAAWE,QAAX,CADsB,EAEtB,CAACF,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CAFsB,EAGtB,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAQ,GAAGJ,UAAlC,CAHsB,EAItB,CAACE,QAAD,EAAWE,QAAX,CAJsB,CAAD,CAAD,CAAxB,EAKKf,OAAO,CAAC,CAAC,CACV,CAACa,QAAD,EAAWE,QAAX,CADU,EAEV,CAACF,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAQ,GAAGJ,UAAlC,CAFU,EAGV,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAvB,CAHU,EAIV,CAACF,QAAD,EAAWE,QAAX,CAJU,CAAD,CAAD,CALZ;AAWH,OAZM,MAYA,IAAID,EAAE,GAAG,CAAL,KAAW,CAAX,IAAgBF,EAAE,GAAG,CAAL,KAAW,CAA/B,EAAkC;AACrCL,QAAAA,EAAE,CAACS,QAAH,CAAYC,IAAZ,CAAiBjB,OAAO,CAAC,CAAC,CACtB,CAACa,QAAD,EAAWE,QAAX,CADsB,EAEtB,CAACF,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CAFsB,EAGtB,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAvB,CAHsB,EAItB,CAACF,QAAD,EAAWE,QAAX,CAJsB,CAAD,CAAD,CAAxB,EAKKf,OAAO,CAAC,CAAC,CACV,CAACa,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CADU,EAEV,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAQ,GAAGJ,UAAlC,CAFU,EAGV,CAACE,QAAQ,GAAGJ,SAAZ,EAAuBM,QAAvB,CAHU,EAIV,CAACF,QAAD,EAAWE,QAAQ,GAAGJ,UAAtB,CAJU,CAAD,CAAD,CALZ;AAWH;;AACDI,MAAAA,QAAQ,IAAIJ,UAAZ;AACAG,MAAAA,EAAE;AACL;;AACDF,IAAAA,EAAE;AACFC,IAAAA,QAAQ,IAAIJ,SAAZ;AACH;;AACD,SAAOF,EAAP;AACH,CArED","sourcesContent":["var featurecollection = require('turf-helpers').featureCollection;\nvar polygon = require('turf-helpers').polygon;\nvar distance = require('turf-distance');\n\n/**\n * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.\n *\n * @name triangleGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSize dimension of each cell\n * @param {string} units units to use for cellWidth\n * @return {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var triangleGrid = turf.triangleGrid(extent, cellWidth, units);\n *\n * //=triangleGrid\n */\nmodule.exports = function (bbox, cellSize, units) {\n    var fc = featurecollection([]);\n    var xFraction = cellSize / (distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], units));\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSize / (distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], units));\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n    var xi = 0;\n    var currentX = bbox[0];\n    while (currentX <= bbox[2]) {\n        var yi = 0;\n        var currentY = bbox[1];\n        while (currentY <= bbox[3]) {\n            if (xi % 2 === 0 && yi % 2 === 0) {\n                fc.features.push(polygon([[\n                    [currentX, currentY],\n                    [currentX, currentY + cellHeight],\n                    [currentX + cellWidth, currentY],\n                    [currentX, currentY]\n                ]]), polygon([[\n                    [currentX, currentY + cellHeight],\n                    [currentX + cellWidth, currentY + cellHeight],\n                    [currentX + cellWidth, currentY],\n                    [currentX, currentY + cellHeight]\n                ]]));\n            } else if (xi % 2 === 0 && yi % 2 === 1) {\n                fc.features.push(polygon([[\n                    [currentX, currentY],\n                    [currentX + cellWidth, currentY + cellHeight],\n                    [currentX + cellWidth, currentY],\n                    [currentX, currentY]\n                ]]), polygon([[\n                    [currentX, currentY],\n                    [currentX, currentY + cellHeight],\n                    [currentX + cellWidth, currentY + cellHeight],\n                    [currentX, currentY]\n                ]]));\n            } else if (yi % 2 === 0 && xi % 2 === 1) {\n                fc.features.push(polygon([[\n                    [currentX, currentY],\n                    [currentX, currentY + cellHeight],\n                    [currentX + cellWidth, currentY + cellHeight],\n                    [currentX, currentY]\n                ]]), polygon([[\n                    [currentX, currentY],\n                    [currentX + cellWidth, currentY + cellHeight],\n                    [currentX + cellWidth, currentY],\n                    [currentX, currentY]\n                ]]));\n            } else if (yi % 2 === 1 && xi % 2 === 1) {\n                fc.features.push(polygon([[\n                    [currentX, currentY],\n                    [currentX, currentY + cellHeight],\n                    [currentX + cellWidth, currentY],\n                    [currentX, currentY]\n                ]]), polygon([[\n                    [currentX, currentY + cellHeight],\n                    [currentX + cellWidth, currentY + cellHeight],\n                    [currentX + cellWidth, currentY],\n                    [currentX, currentY + cellHeight]\n                ]]));\n            }\n            currentY += cellHeight;\n            yi++;\n        }\n        xi++;\n        currentX += cellWidth;\n    }\n    return fc;\n};\n\n"]},"metadata":{},"sourceType":"script"}