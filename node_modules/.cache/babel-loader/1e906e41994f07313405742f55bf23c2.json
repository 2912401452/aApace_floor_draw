{"ast":null,"code":"//http://en.wikipedia.org/wiki/Delaunay_triangulation\n//https://github.com/ironwallaby/delaunay\nvar polygon = require('turf-helpers').polygon;\n\nvar featurecollection = require('turf-helpers').featureCollection;\n/**\n * Takes a set of {@link Point|points} and the name of a z-value property and\n * creates a [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * This triangulates the points, as well as adds properties called `a`, `b`,\n * and `c` representing the value of the given `propertyName` at each of\n * the points that represent the corners of the triangle.\n *\n * @name tin\n * @param {FeatureCollection<Point>} points input points\n * @param {String=} z name of the property from which to pull z values\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @return {FeatureCollection<Polygon>} TIN output\n * @example\n * // generate some random point data\n * var points = turf.random('points', 30, {\n *   bbox: [50, 30, 70, 50]\n * });\n * //=points\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z')\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   // roughly turn the properties of each\n *   // triangle into a fill color\n *   // so we can visualize the result\n *   properties.fill = '#' + properties.a +\n *     properties.b + properties.c;\n * }\n * //=tin\n */\n\n\nmodule.exports = function (points, z) {\n  //break down points\n  return featurecollection(triangulate(points.features.map(function (p) {\n    var point = {\n      x: p.geometry.coordinates[0],\n      y: p.geometry.coordinates[1]\n    };\n    if (z) point.z = p.properties[z];\n    return point;\n  })).map(function (triangle) {\n    return polygon([[[triangle.a.x, triangle.a.y], [triangle.b.x, triangle.b.y], [triangle.c.x, triangle.c.y], [triangle.a.x, triangle.a.y]]], {\n      a: triangle.a.z,\n      b: triangle.b.z,\n      c: triangle.c.z\n    });\n  }));\n};\n\nfunction Triangle(a, b, c) {\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  var A = b.x - a.x,\n      B = b.y - a.y,\n      C = c.x - a.x,\n      D = c.y - a.y,\n      E = A * (a.x + b.x) + B * (a.y + b.y),\n      F = C * (a.x + c.x) + D * (a.y + c.y),\n      G = 2 * (A * (c.y - b.y) - B * (c.x - b.x)),\n      minx,\n      miny,\n      dx,\n      dy; // If the points of the triangle are collinear, then just find the\n  // extremes and use the midpoint as the center of the circumcircle.\n\n  if (Math.abs(G) < 0.000001) {\n    minx = Math.min(a.x, b.x, c.x);\n    miny = Math.min(a.y, b.y, c.y);\n    dx = (Math.max(a.x, b.x, c.x) - minx) * 0.5;\n    dy = (Math.max(a.y, b.y, c.y) - miny) * 0.5;\n    this.x = minx + dx;\n    this.y = miny + dy;\n    this.r = dx * dx + dy * dy;\n  } else {\n    this.x = (D * E - B * F) / G;\n    this.y = (A * F - C * E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n}\n\nfunction byX(a, b) {\n  return b.x - a.x;\n}\n\nfunction dedup(edges) {\n  var j = edges.length,\n      a,\n      b,\n      i,\n      m,\n      n;\n\n  outer: while (j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n\n    while (i) {\n      n = edges[--i];\n      m = edges[--i];\n\n      if (a === m && b === n || a === n && b === m) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer;\n      }\n    }\n  }\n}\n\nfunction triangulate(vertices) {\n  // Bail if there aren't enough vertices to form any triangles.\n  if (vertices.length < 3) return []; // Ensure the vertex array is in order of descending X coordinate\n  // (which is needed to ensure a subquadratic runtime), and then find\n  // the bounding box around the points.\n\n  vertices.sort(byX);\n  var i = vertices.length - 1,\n      xmin = vertices[i].x,\n      xmax = vertices[0].x,\n      ymin = vertices[i].y,\n      ymax = ymin;\n\n  while (i--) {\n    if (vertices[i].y < ymin) ymin = vertices[i].y;\n    if (vertices[i].y > ymax) ymax = vertices[i].y;\n  } //Find a supertriangle, which is a triangle that surrounds all the\n  //vertices. This is used like something of a sentinel value to remove\n  //cases in the main algorithm, and is removed before we return any\n  // results.\n  // Once found, put it in the \"open\" list. (The \"open\" list is for\n  // triangles who may still need to be considered; the \"closed\" list is\n  // for triangles which do not.)\n\n\n  var dx = xmax - xmin,\n      dy = ymax - ymin,\n      dmax = dx > dy ? dx : dy,\n      xmid = (xmax + xmin) * 0.5,\n      ymid = (ymax + ymin) * 0.5,\n      open = [new Triangle({\n    x: xmid - 20 * dmax,\n    y: ymid - dmax,\n    __sentinel: true\n  }, {\n    x: xmid,\n    y: ymid + 20 * dmax,\n    __sentinel: true\n  }, {\n    x: xmid + 20 * dmax,\n    y: ymid - dmax,\n    __sentinel: true\n  })],\n      closed = [],\n      edges = [],\n      j,\n      a,\n      b; // Incrementally add each vertex to the mesh.\n\n  i = vertices.length;\n\n  while (i--) {\n    // For each open triangle, check to see if the current point is\n    // inside it's circumcircle. If it is, remove the triangle and add\n    // it's edges to an edge list.\n    edges.length = 0;\n    j = open.length;\n\n    while (j--) {\n      // If this point is to the right of this triangle's circumcircle,\n      // then this triangle should never get checked again. Remove it\n      // from the open list, add it to the closed list, and skip.\n      dx = vertices[i].x - open[j].x;\n\n      if (dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue;\n      } // If not, skip this triangle.\n\n\n      dy = vertices[i].y - open[j].y;\n      if (dx * dx + dy * dy > open[j].r) continue; // Remove the triangle and add it's edges to the edge list.\n\n      edges.push(open[j].a, open[j].b, open[j].b, open[j].c, open[j].c, open[j].a);\n      open.splice(j, 1);\n    } // Remove any doubled edges.\n\n\n    dedup(edges); // Add a new triangle for each edge.\n\n    j = edges.length;\n\n    while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      open.push(new Triangle(a, b, vertices[i]));\n    }\n  } // Copy any remaining open triangles to the closed list, and then\n  // remove any triangles that share a vertex with the supertriangle.\n\n\n  Array.prototype.push.apply(closed, open);\n  i = closed.length;\n\n  while (i--) if (closed[i].a.__sentinel || closed[i].b.__sentinel || closed[i].c.__sentinel) closed.splice(i, 1);\n\n  return closed;\n}","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-tin/index.js"],"names":["polygon","require","featurecollection","featureCollection","module","exports","points","z","triangulate","features","map","p","point","x","geometry","coordinates","y","properties","triangle","a","b","c","Triangle","A","B","C","D","E","F","G","minx","miny","dx","dy","Math","abs","min","max","r","byX","dedup","edges","j","length","i","m","n","outer","splice","vertices","sort","xmin","xmax","ymin","ymax","dmax","xmid","ymid","open","__sentinel","closed","push","Array","prototype","apply"],"mappings":"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","sourcesContent":["//http://en.wikipedia.org/wiki/Delaunay_triangulation\n//https://github.com/ironwallaby/delaunay\nvar polygon = require('turf-helpers').polygon;\nvar featurecollection = require('turf-helpers').featureCollection;\n\n/**\n * Takes a set of {@link Point|points} and the name of a z-value property and\n * creates a [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * This triangulates the points, as well as adds properties called `a`, `b`,\n * and `c` representing the value of the given `propertyName` at each of\n * the points that represent the corners of the triangle.\n *\n * @name tin\n * @param {FeatureCollection<Point>} points input points\n * @param {String=} z name of the property from which to pull z values\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @return {FeatureCollection<Polygon>} TIN output\n * @example\n * // generate some random point data\n * var points = turf.random('points', 30, {\n *   bbox: [50, 30, 70, 50]\n * });\n * //=points\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z')\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   // roughly turn the properties of each\n *   // triangle into a fill color\n *   // so we can visualize the result\n *   properties.fill = '#' + properties.a +\n *     properties.b + properties.c;\n * }\n * //=tin\n */\nmodule.exports = function (points, z) {\n    //break down points\n    return featurecollection(triangulate(points.features.map(function (p) {\n        var point = {\n            x: p.geometry.coordinates[0],\n            y: p.geometry.coordinates[1]\n        };\n        if (z) point.z = p.properties[z];\n        return point;\n    })).map(function (triangle) {\n        return polygon([[\n        [triangle.a.x, triangle.a.y],\n        [triangle.b.x, triangle.b.y],\n        [triangle.c.x, triangle.c.y],\n        [triangle.a.x, triangle.a.y]\n        ]], {\n            a: triangle.a.z,\n            b: triangle.b.z,\n            c: triangle.c.z\n        });\n    }));\n};\n\nfunction Triangle(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n\n    var A = b.x - a.x,\n        B = b.y - a.y,\n        C = c.x - a.x,\n        D = c.y - a.y,\n        E = A * (a.x + b.x) + B * (a.y + b.y),\n        F = C * (a.x + c.x) + D * (a.y + c.y),\n        G = 2 * (A * (c.y - b.y) - B * (c.x - b.x)),\n        minx, miny, dx, dy;\n\n    // If the points of the triangle are collinear, then just find the\n    // extremes and use the midpoint as the center of the circumcircle.\n    if (Math.abs(G) < 0.000001) {\n        minx = Math.min(a.x, b.x, c.x);\n        miny = Math.min(a.y, b.y, c.y);\n        dx = (Math.max(a.x, b.x, c.x) - minx) * 0.5;\n        dy = (Math.max(a.y, b.y, c.y) - miny) * 0.5;\n\n        this.x = minx + dx;\n        this.y = miny + dy;\n        this.r = dx * dx + dy * dy;\n    } else {\n        this.x = (D * E - B * F) / G;\n        this.y = (A * F - C * E) / G;\n        dx = this.x - a.x;\n        dy = this.y - a.y;\n        this.r = dx * dx + dy * dy;\n    }\n}\n\nfunction byX(a, b) {\n    return b.x - a.x;\n}\n\nfunction dedup(edges) {\n    var j = edges.length,\n        a, b, i, m, n;\n\n    outer:\n  while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      i = j;\n      while (i) {\n          n = edges[--i];\n          m = edges[--i];\n          if ((a === m && b === n) || (a === n && b === m)) {\n              edges.splice(j, 2);\n              edges.splice(i, 2);\n              j -= 2;\n              continue outer;\n          }\n      }\n  }\n}\n\nfunction triangulate(vertices) {\n    // Bail if there aren't enough vertices to form any triangles.\n    if (vertices.length < 3)\n        return [];\n\n    // Ensure the vertex array is in order of descending X coordinate\n    // (which is needed to ensure a subquadratic runtime), and then find\n    // the bounding box around the points.\n    vertices.sort(byX);\n\n    var i = vertices.length - 1,\n        xmin = vertices[i].x,\n        xmax = vertices[0].x,\n        ymin = vertices[i].y,\n        ymax = ymin;\n\n    while (i--) {\n        if (vertices[i].y < ymin)\n            ymin = vertices[i].y;\n        if (vertices[i].y > ymax)\n            ymax = vertices[i].y;\n    }\n\n    //Find a supertriangle, which is a triangle that surrounds all the\n    //vertices. This is used like something of a sentinel value to remove\n    //cases in the main algorithm, and is removed before we return any\n    // results.\n\n    // Once found, put it in the \"open\" list. (The \"open\" list is for\n    // triangles who may still need to be considered; the \"closed\" list is\n    // for triangles which do not.)\n    var dx = xmax - xmin,\n        dy = ymax - ymin,\n        dmax = (dx > dy) ? dx : dy,\n        xmid = (xmax + xmin) * 0.5,\n        ymid = (ymax + ymin) * 0.5,\n        open = [\n            new Triangle({\n                x: xmid - 20 * dmax,\n                y: ymid - dmax,\n                __sentinel: true\n            }, {\n                x: xmid,\n                y: ymid + 20 * dmax,\n                __sentinel: true\n            }, {\n                x: xmid + 20 * dmax,\n                y: ymid - dmax,\n                __sentinel: true\n            }\n        )],\n        closed = [],\n        edges = [],\n        j, a, b;\n\n    // Incrementally add each vertex to the mesh.\n    i = vertices.length;\n    while (i--) {\n        // For each open triangle, check to see if the current point is\n        // inside it's circumcircle. If it is, remove the triangle and add\n        // it's edges to an edge list.\n        edges.length = 0;\n        j = open.length;\n        while (j--) {\n            // If this point is to the right of this triangle's circumcircle,\n            // then this triangle should never get checked again. Remove it\n            // from the open list, add it to the closed list, and skip.\n            dx = vertices[i].x - open[j].x;\n            if (dx > 0 && dx * dx > open[j].r) {\n                closed.push(open[j]);\n                open.splice(j, 1);\n                continue;\n            }\n\n            // If not, skip this triangle.\n            dy = vertices[i].y - open[j].y;\n            if (dx * dx + dy * dy > open[j].r)\n                continue;\n\n            // Remove the triangle and add it's edges to the edge list.\n            edges.push(\n        open[j].a, open[j].b,\n        open[j].b, open[j].c,\n        open[j].c, open[j].a\n      );\n            open.splice(j, 1);\n        }\n\n        // Remove any doubled edges.\n        dedup(edges);\n\n        // Add a new triangle for each edge.\n        j = edges.length;\n        while (j) {\n            b = edges[--j];\n            a = edges[--j];\n            open.push(new Triangle(a, b, vertices[i]));\n        }\n    }\n\n    // Copy any remaining open triangles to the closed list, and then\n    // remove any triangles that share a vertex with the supertriangle.\n    Array.prototype.push.apply(closed, open);\n\n    i = closed.length;\n    while (i--)\n        if (closed[i].a.__sentinel ||\n      closed[i].b.__sentinel ||\n      closed[i].c.__sentinel)\n            closed.splice(i, 1);\n\n    return closed;\n}\n"]},"metadata":{},"sourceType":"script"}