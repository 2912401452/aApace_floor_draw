{"ast":null,"code":"var linestring = require('turf-helpers').lineString;\n\nvar Spline = require('./spline.js');\n/**\n * Takes a {@link LineString|line} and returns a curved version\n * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\n * algorithm.\n *\n * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n *\n * @name bezier\n * @param {Feature<LineString>} line input LineString\n * @param {Number} [resolution=10000] time in milliseconds between points\n * @param {Number} [sharpness=0.85] a measure of how curvy the path should be between splines\n * @returns {Feature<LineString>} curved line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"stroke\": \"#f00\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-76.091308, 18.427501],\n *       [-76.695556, 18.729501],\n *       [-76.552734, 19.40443],\n *       [-74.61914, 19.134789],\n *       [-73.652343, 20.07657],\n *       [-73.157958, 20.210656]\n *     ]\n *   }\n * };\n *\n * var curved = turf.bezier(line);\n * curved.properties = { stroke: '#0f0' };\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, curved]\n * };\n *\n * //=result\n */\n\n\nmodule.exports = function (line, resolution, sharpness) {\n  var lineOut = linestring([]);\n  lineOut.properties = line.properties;\n  var spline = new Spline({\n    points: line.geometry.coordinates.map(function (pt) {\n      return {\n        x: pt[0],\n        y: pt[1]\n      };\n    }),\n    duration: resolution,\n    sharpness: sharpness\n  });\n\n  for (var i = 0; i < spline.duration; i += 10) {\n    var pos = spline.pos(i);\n\n    if (Math.floor(i / 100) % 2 === 0) {\n      lineOut.geometry.coordinates.push([pos.x, pos.y]);\n    }\n  }\n\n  return lineOut;\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-bezier/index.js"],"names":["linestring","require","lineString","Spline","module","exports","line","resolution","sharpness","lineOut","properties","spline","points","geometry","coordinates","map","pt","x","y","duration","i","pos","Math","floor","push"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,UAAzC;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,SAA5B,EAAuC;AACpD,MAAIC,OAAO,GAAGT,UAAU,CAAC,EAAD,CAAxB;AAEAS,EAAAA,OAAO,CAACC,UAAR,GAAqBJ,IAAI,CAACI,UAA1B;AAEA,MAAIC,MAAM,GAAG,IAAIR,MAAJ,CAAW;AACpBS,IAAAA,MAAM,EAAEN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0BC,GAA1B,CAA8B,UAAUC,EAAV,EAAc;AAChD,aAAO;AAACC,QAAAA,CAAC,EAAED,EAAE,CAAC,CAAD,CAAN;AAAWE,QAAAA,CAAC,EAAEF,EAAE,CAAC,CAAD;AAAhB,OAAP;AACH,KAFO,CADY;AAIpBG,IAAAA,QAAQ,EAAEZ,UAJU;AAKpBC,IAAAA,SAAS,EAAEA;AALS,GAAX,CAAb;;AAQA,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACQ,QAA3B,EAAqCC,CAAC,IAAI,EAA1C,EAA8C;AAC1C,QAAIC,GAAG,GAAGV,MAAM,CAACU,GAAP,CAAWD,CAAX,CAAV;;AACA,QAAIE,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,GAAf,IAAsB,CAAtB,KAA4B,CAAhC,EAAmC;AAC/BX,MAAAA,OAAO,CAACI,QAAR,CAAiBC,WAAjB,CAA6BU,IAA7B,CAAkC,CAACH,GAAG,CAACJ,CAAL,EAAQI,GAAG,CAACH,CAAZ,CAAlC;AACH;AACJ;;AAED,SAAOT,OAAP;AACH,CArBD","sourcesContent":["var linestring = require('turf-helpers').lineString;\nvar Spline = require('./spline.js');\n\n/**\n * Takes a {@link LineString|line} and returns a curved version\n * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\n * algorithm.\n *\n * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n *\n * @name bezier\n * @param {Feature<LineString>} line input LineString\n * @param {Number} [resolution=10000] time in milliseconds between points\n * @param {Number} [sharpness=0.85] a measure of how curvy the path should be between splines\n * @returns {Feature<LineString>} curved line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"stroke\": \"#f00\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-76.091308, 18.427501],\n *       [-76.695556, 18.729501],\n *       [-76.552734, 19.40443],\n *       [-74.61914, 19.134789],\n *       [-73.652343, 20.07657],\n *       [-73.157958, 20.210656]\n *     ]\n *   }\n * };\n *\n * var curved = turf.bezier(line);\n * curved.properties = { stroke: '#0f0' };\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, curved]\n * };\n *\n * //=result\n */\nmodule.exports = function (line, resolution, sharpness) {\n    var lineOut = linestring([]);\n\n    lineOut.properties = line.properties;\n\n    var spline = new Spline({\n        points: line.geometry.coordinates.map(function (pt) {\n            return {x: pt[0], y: pt[1]};\n        }),\n        duration: resolution,\n        sharpness: sharpness\n    });\n\n    for (var i = 0; i < spline.duration; i += 10) {\n        var pos = spline.pos(i);\n        if (Math.floor(i / 100) % 2 === 0) {\n            lineOut.geometry.coordinates.push([pos.x, pos.y]);\n        }\n    }\n\n    return lineOut;\n};\n"]},"metadata":{},"sourceType":"script"}