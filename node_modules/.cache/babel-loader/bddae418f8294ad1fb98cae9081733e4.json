{"ast":null,"code":"var inside = require('turf-inside');\n/**\n * Joins attributes FeatureCollection of polygons with a FeatureCollection of\n * points. Given an `inProperty` on points and an `outProperty` for polygons,\n * this finds every point that lies within each polygon, collects the `inProperty`\n * values from those points, and adds them as an array to `outProperty` on the\n * polygon.\n *\n * @name collect\n * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate\n * @param {FeatureCollection<Point>} points points to be aggregated\n * @param {string} inProperty property to be nested from\n * @param {string} outProperty property to be nested into\n * @return {FeatureCollection<Polygon>} polygons with properties listed based on `outField`\n * @example\n * var poly1 = polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\n * var poly2 = polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\n * var polyFC = featurecollection([poly1, poly2]);\n * var pt1 = point([5,5], {population: 200});\n * var pt2 = point([1,3], {population: 600});\n * var pt3 = point([14,2], {population: 100});\n * var pt4 = point([13,1], {population: 200});\n * var pt5 = point([19,7], {population: 300});\n * var ptFC = featurecollection([pt1, pt2, pt3, pt4, pt5]);\n * var aggregated = aggregate(polyFC, ptFC, 'population', 'values');\n *\n * aggregated.features[0].properties.values // => [200, 600]);\n */\n\n\nmodule.exports = function collect(polygons, points, inProperty, outProperty) {\n  polygons.features.forEach(function (poly) {\n    var values = points.features.filter(function (pt) {\n      return inside(pt, poly);\n    }).map(function (pt) {\n      return pt.properties[inProperty];\n    });\n\n    if (!poly.properties) {\n      poly.properties = {};\n    }\n\n    poly.properties[outProperty] = values;\n  });\n  return polygons;\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-collect/index.js"],"names":["inside","require","module","exports","collect","polygons","points","inProperty","outProperty","features","forEach","poly","values","filter","pt","map","properties"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,MAA3B,EAAmCC,UAAnC,EAA+CC,WAA/C,EAA4D;AACzEH,EAAAA,QAAQ,CAACI,QAAT,CAAkBC,OAAlB,CAA0B,UAAUC,IAAV,EAAgB;AACtC,QAAIC,MAAM,GAAGN,MAAM,CAACG,QAAP,CAAgBI,MAAhB,CAAuB,UAAUC,EAAV,EAAc;AAC9C,aAAOd,MAAM,CAACc,EAAD,EAAKH,IAAL,CAAb;AACH,KAFY,EAEVI,GAFU,CAEN,UAAUD,EAAV,EAAc;AACjB,aAAOA,EAAE,CAACE,UAAH,CAAcT,UAAd,CAAP;AACH,KAJY,CAAb;;AAMA,QAAI,CAACI,IAAI,CAACK,UAAV,EAAsB;AAClBL,MAAAA,IAAI,CAACK,UAAL,GAAkB,EAAlB;AACH;;AAEDL,IAAAA,IAAI,CAACK,UAAL,CAAgBR,WAAhB,IAA+BI,MAA/B;AACH,GAZD;AAcA,SAAOP,QAAP;AACH,CAhBD","sourcesContent":["var inside = require('turf-inside');\n\n/**\n * Joins attributes FeatureCollection of polygons with a FeatureCollection of\n * points. Given an `inProperty` on points and an `outProperty` for polygons,\n * this finds every point that lies within each polygon, collects the `inProperty`\n * values from those points, and adds them as an array to `outProperty` on the\n * polygon.\n *\n * @name collect\n * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate\n * @param {FeatureCollection<Point>} points points to be aggregated\n * @param {string} inProperty property to be nested from\n * @param {string} outProperty property to be nested into\n * @return {FeatureCollection<Polygon>} polygons with properties listed based on `outField`\n * @example\n * var poly1 = polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\n * var poly2 = polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\n * var polyFC = featurecollection([poly1, poly2]);\n * var pt1 = point([5,5], {population: 200});\n * var pt2 = point([1,3], {population: 600});\n * var pt3 = point([14,2], {population: 100});\n * var pt4 = point([13,1], {population: 200});\n * var pt5 = point([19,7], {population: 300});\n * var ptFC = featurecollection([pt1, pt2, pt3, pt4, pt5]);\n * var aggregated = aggregate(polyFC, ptFC, 'population', 'values');\n *\n * aggregated.features[0].properties.values // => [200, 600]);\n */\nmodule.exports = function collect(polygons, points, inProperty, outProperty) {\n    polygons.features.forEach(function (poly) {\n        var values = points.features.filter(function (pt) {\n            return inside(pt, poly);\n        }).map(function (pt) {\n            return pt.properties[inProperty];\n        });\n\n        if (!poly.properties) {\n            poly.properties = {};\n        }\n\n        poly.properties[outProperty] = values;\n    });\n\n    return polygons;\n};\n"]},"metadata":{},"sourceType":"script"}