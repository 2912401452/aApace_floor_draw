{"ast":null,"code":"// look here for help http://svn.osgeo.org/grass/grass/branches/releasebranch_6_4/vector/v.overlay/main.c\n//must be array of polygons\n// depend on jsts for now https://github.com/bjornharrtell/jsts/blob/master/examples/overlay.html\nvar jsts = require('jsts');\n/**\n * Takes two {@link Polygon|polygons} and returns a combined polygon. If the input polygons are not contiguous, this function returns a {@link MultiPolygon} feature.\n *\n * @name union\n * @param {Feature<Polygon>} poly1 input polygon\n * @param {Feature<Polygon>} poly2 another input polygon\n * @return {Feature<(Polygon|MultiPolygon)>} a combined {@link Polygon} or {@link MultiPolygon} feature\n * @example\n * var poly1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-82.574787, 35.594087],\n *       [-82.574787, 35.615581],\n *       [-82.545261, 35.615581],\n *       [-82.545261, 35.594087],\n *       [-82.574787, 35.594087]\n *     ]]\n *   }\n * };\n * var poly2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#00f\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-82.560024, 35.585153],\n *       [-82.560024, 35.602602],\n *       [-82.52964, 35.602602],\n *       [-82.52964, 35.585153],\n *       [-82.560024, 35.585153]\n *     ]]\n *   }\n * };\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [poly1, poly2]\n * };\n *\n * var union = turf.union(poly1, poly2);\n *\n * //=polygons\n *\n * //=union\n */\n\n\nmodule.exports = function (poly1, poly2) {\n  var reader = new jsts.io.GeoJSONReader();\n  var a = reader.read(JSON.stringify(poly1.geometry));\n  var b = reader.read(JSON.stringify(poly2.geometry));\n  var union = a.union(b);\n  var writer = new jsts.io.GeoJSONWriter();\n  union = writer.write(union);\n  return {\n    type: 'Feature',\n    geometry: union,\n    properties: poly1.properties\n  };\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-union/index.js"],"names":["jsts","require","module","exports","poly1","poly2","reader","io","GeoJSONReader","a","read","JSON","stringify","geometry","b","union","writer","GeoJSONWriter","write","type","properties"],"mappings":"AAAA;AACA;AAEA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACrC,MAAIC,MAAM,GAAG,IAAIN,IAAI,CAACO,EAAL,CAAQC,aAAZ,EAAb;AACA,MAAIC,CAAC,GAAGH,MAAM,CAACI,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeR,KAAK,CAACS,QAArB,CAAZ,CAAR;AACA,MAAIC,CAAC,GAAGR,MAAM,CAACI,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeP,KAAK,CAACQ,QAArB,CAAZ,CAAR;AACA,MAAIE,KAAK,GAAGN,CAAC,CAACM,KAAF,CAAQD,CAAR,CAAZ;AACA,MAAIE,MAAM,GAAG,IAAIhB,IAAI,CAACO,EAAL,CAAQU,aAAZ,EAAb;AAEAF,EAAAA,KAAK,GAAGC,MAAM,CAACE,KAAP,CAAaH,KAAb,CAAR;AACA,SAAO;AACHI,IAAAA,IAAI,EAAE,SADH;AAEHN,IAAAA,QAAQ,EAAEE,KAFP;AAGHK,IAAAA,UAAU,EAAEhB,KAAK,CAACgB;AAHf,GAAP;AAKH,CAbD","sourcesContent":["// look here for help http://svn.osgeo.org/grass/grass/branches/releasebranch_6_4/vector/v.overlay/main.c\n//must be array of polygons\n\n// depend on jsts for now https://github.com/bjornharrtell/jsts/blob/master/examples/overlay.html\n\nvar jsts = require('jsts');\n\n/**\n * Takes two {@link Polygon|polygons} and returns a combined polygon. If the input polygons are not contiguous, this function returns a {@link MultiPolygon} feature.\n *\n * @name union\n * @param {Feature<Polygon>} poly1 input polygon\n * @param {Feature<Polygon>} poly2 another input polygon\n * @return {Feature<(Polygon|MultiPolygon)>} a combined {@link Polygon} or {@link MultiPolygon} feature\n * @example\n * var poly1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-82.574787, 35.594087],\n *       [-82.574787, 35.615581],\n *       [-82.545261, 35.615581],\n *       [-82.545261, 35.594087],\n *       [-82.574787, 35.594087]\n *     ]]\n *   }\n * };\n * var poly2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"fill\": \"#00f\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-82.560024, 35.585153],\n *       [-82.560024, 35.602602],\n *       [-82.52964, 35.602602],\n *       [-82.52964, 35.585153],\n *       [-82.560024, 35.585153]\n *     ]]\n *   }\n * };\n * var polygons = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [poly1, poly2]\n * };\n *\n * var union = turf.union(poly1, poly2);\n *\n * //=polygons\n *\n * //=union\n */\nmodule.exports = function (poly1, poly2) {\n    var reader = new jsts.io.GeoJSONReader();\n    var a = reader.read(JSON.stringify(poly1.geometry));\n    var b = reader.read(JSON.stringify(poly2.geometry));\n    var union = a.union(b);\n    var writer = new jsts.io.GeoJSONWriter();\n\n    union = writer.write(union);\n    return {\n        type: 'Feature',\n        geometry: union,\n        properties: poly1.properties\n    };\n};\n"]},"metadata":{},"sourceType":"script"}