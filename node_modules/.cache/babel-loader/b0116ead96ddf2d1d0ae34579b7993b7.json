{"ast":null,"code":"var _jsxFileName = \"/Users/yiqianyao/workspace/something/floorcanvas/src/components/index.tsx\";\nimport React from 'react';\nimport { isOnTable } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet floorBaseData = {\n  shape: [[100, 100], [340, 100], [340, 200], [300, 200], [300, 380], [100, 380]],\n  holes: [[[120, 120], [160, 120], [160, 180], [120, 180]], [[120, 220], [140, 220], [140, 240], [120, 240]]]\n};\nlet tableData = [{\n  user: '315103',\n  tableid: '6-6-201',\n  shape: [[170, 160], [180, 160], [180, 170], [170, 170]]\n}, {\n  user: '315104',\n  tableid: '6-6-204',\n  shape: [[190, 160], [200, 160], [200, 170], [190, 170]]\n}];\nlet roomData = [{\n  roomid: '6-6-102C',\n  shape: [[200, 200], [240, 200], [240, 240], [200, 240]]\n}, {\n  roomid: '6-6-103C',\n  shape: [[300, 200], [340, 200], [340, 240], [300, 240]]\n}];\n\nclass Plane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.top = void 0;\n    this.left = void 0;\n    this.isFloorSelect = false;\n    this.selectedTableId = null;\n    this.selectedRoomId = null;\n    this.selectColors = {\n      floorFill: '#ff0',\n      floorStroke: '#f00',\n      tableFill: '#f00',\n      tableStroke: '#000',\n      roomFill: '#00f',\n      roomStroke: '#fff'\n    };\n    this.width = 100;\n    this.height = 100;\n    this.top = 0;\n    this.left = 0;\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n  }\n\n  componentDidMount() {\n    this.initProperties();\n    this.draw();\n    this.canvas.addEventListener('click', this.handleClick, false);\n    this.canvas.addEventListener('mousemove', this.handleMouseMove, false);\n  }\n\n  componentWillUnmount() {\n    this.canvas.removeEventListener('click', this.handleClick);\n    this.canvas.removeEventListener('mousemove', this.handleMouseMove);\n  }\n\n  initProperties() {\n    let {\n      width,\n      height\n    } = this.props;\n    this.width = width;\n    this.height = height;\n    this.ctx = this.setCanvas(width, height);\n    let {\n      top,\n      left\n    } = this.canvas.getBoundingClientRect();\n    this.top = top;\n    this.left = left;\n  }\n\n  draw() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.drawFloorBase(this.ctx, floorBaseData, '#00f', '#0ff');\n    this.drawTables(this.ctx, tableData, '#f00', '#0f0');\n  }\n\n  handleClick(e) {\n    let {\n      clientX,\n      clientY\n    } = e;\n    let x = clientX - this.left;\n    let y = clientY - this.top; // let b = isPointInFloor([x, y], floorBaseData)\n    // console.log(b)\n    // console.log(isOnTable([x, y], tableData))\n  }\n\n  handleMouseMove(e) {\n    let {\n      clientX,\n      clientY\n    } = e;\n    let x = clientX - this.left;\n    let y = clientY - this.top;\n    let testTableResult = isOnTable([x, y], tableData);\n\n    if (testTableResult) {\n      this.selectedTableId = testTableResult.tableid;\n    } else {\n      this.selectedTableId = null;\n    }\n\n    this.draw();\n  } // 绘制楼层 - 不需要被选中\n\n\n  drawFloorBase(ctx, floorBaseData, strokeStyle, fillStyle) {\n    let {\n      shape,\n      holes\n    } = floorBaseData;\n    ctx.strokeStyle = strokeStyle;\n    ctx.fillStyle = fillStyle; // draw line\n\n    ctx.beginPath();\n    shape.map(s => {\n      ctx.lineTo(...s);\n    });\n    ctx.lineTo(...shape[0]);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke(); // draw holes\n\n    holes.map(hole => {\n      ctx.beginPath();\n      ctx.save();\n      hole.map(h => {\n        ctx.lineTo(...h);\n      });\n      ctx.lineTo(...hole[0]);\n      ctx.clip();\n      ctx.clearRect(0, 0, this.width, this.height);\n      ctx.closePath();\n      ctx.restore();\n      ctx.stroke();\n    });\n  } // 绘制座位 - 需要被选中\n\n\n  drawTables(ctx, tableData, strokeStyle, fillStyle) {\n    tableData.map(td => {\n      let {\n        shape,\n        tableid\n      } = td;\n      ctx.strokeStyle = this.selectedTableId === tableid ? this.selectColors.tableStroke : strokeStyle;\n      ctx.fillStyle = this.selectedTableId === tableid ? this.selectColors.tableFill : fillStyle; // draw line\n\n      ctx.beginPath();\n      shape.map(s => {\n        ctx.lineTo(...s);\n      });\n      ctx.lineTo(...shape[0]);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n    });\n  }\n\n  drawRooms(ctx, roomData, strokeStyle, fillStyle) {\n    roomData.map(rd => {\n      let {\n        shape,\n        roomid\n      } = rd;\n      ctx.strokeStyle = this.selectedRoomId === roomid ? this.selectColors.roomStroke : strokeStyle;\n      ctx.fillStyle = this.selectedRoomId === roomid ? this.selectColors.roomFill : fillStyle; // draw line\n\n      ctx.beginPath();\n      shape.map(s => {\n        ctx.lineTo(...s);\n      });\n      ctx.lineTo(...shape[0]);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n    });\n  }\n\n  drawBalcany() {}\n\n  setCanvas(width, height) {\n    this.canvas.style.width = width + 'px';\n    this.canvas.style.height = height + 'px';\n    this.canvas.width = width;\n    this.canvas.height = height;\n    return this.canvas.getContext('2d');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: el => this.canvas = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Plane;","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/src/components/index.tsx"],"names":["React","isOnTable","floorBaseData","shape","holes","tableData","user","tableid","roomData","roomid","Plane","Component","constructor","props","canvas","ctx","width","height","top","left","isFloorSelect","selectedTableId","selectedRoomId","selectColors","floorFill","floorStroke","tableFill","tableStroke","roomFill","roomStroke","handleClick","bind","handleMouseMove","componentDidMount","initProperties","draw","addEventListener","componentWillUnmount","removeEventListener","setCanvas","getBoundingClientRect","clearRect","drawFloorBase","drawTables","e","clientX","clientY","x","y","testTableResult","strokeStyle","fillStyle","beginPath","map","s","lineTo","closePath","fill","stroke","hole","save","h","clip","restore","td","drawRooms","rd","drawBalcany","style","getContext","render","el"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    IPlaneProps,\n    IFloorBaseData,\n    Point,\n    ITableData,\n    IRoomData\n} from './IInterface'\nimport { isPointInFloor, isOnTable } from './utils'\n\nlet floorBaseData: IFloorBaseData = {\n    shape: [\n        [100, 100], \n        [340, 100],\n        [340, 200],\n        [300, 200],\n        [300, 380],\n        [100, 380],\n    ],\n    holes: [\n        [\n            [120, 120],\n            [160, 120],\n            [160, 180],\n            [120, 180]\n        ],\n        [\n            [120, 220],\n            [140, 220],\n            [140, 240],\n            [120, 240]\n        ]\n    ]\n}\n\nlet tableData: ITableData[] = [\n    {\n        user: '315103',\n        tableid: '6-6-201',\n        shape: [\n            [170, 160],\n            [180, 160],\n            [180, 170],\n            [170, 170]\n        ]\n    },\n    {\n        user: '315104',\n        tableid: '6-6-204',\n        shape: [\n            [190, 160],\n            [200, 160],\n            [200, 170],\n            [190, 170]\n        ]\n    }\n]\n\nlet roomData: IRoomData[] = [\n    {\n        roomid: '6-6-102C',\n        shape: [\n            [200, 200],\n            [240, 200],\n            [240, 240],\n            [200, 240]\n        ]\n    },\n    {\n        roomid: '6-6-103C',\n        shape: [\n            [300, 200],\n            [340, 200],\n            [340, 240],\n            [300, 240]\n        ]\n    }\n]\n\nclass Plane extends React.Component<IPlaneProps> {\n    private canvas!: HTMLCanvasElement;\n    private ctx!: CanvasRenderingContext2D;\n    private width: number;\n    private height: number;\n    private top: number;\n    private left: number;\n    private isFloorSelect: boolean = false;\n    private selectedTableId: string|null = null;\n    private selectedRoomId: string|null = null;\n\n    private selectColors = {\n        floorFill: '#ff0',\n        floorStroke: '#f00',\n        tableFill: '#f00',\n        tableStroke: '#000',\n        roomFill: '#00f',\n        roomStroke: '#fff'\n    }\n\n    constructor(props: IPlaneProps) {\n        super(props)\n        this.width = 100;\n        this.height = 100;\n        this.top = 0;\n        this.left = 0;\n        this.handleClick = this.handleClick.bind(this)\n        this.handleMouseMove = this.handleMouseMove.bind(this)\n    }\n\n    componentDidMount() {\n        this.initProperties()\n        \n        this.draw()\n\n        this.canvas.addEventListener('click', this.handleClick, false)\n        this.canvas.addEventListener('mousemove', this.handleMouseMove, false)\n    }\n\n    componentWillUnmount() {\n        this.canvas.removeEventListener('click', this.handleClick)\n        this.canvas.removeEventListener('mousemove', this.handleMouseMove)\n    }\n\n    initProperties() {\n        let { width, height } = this.props\n        this.width = width \n        this.height = height\n        this.ctx = this.setCanvas(width, height)\n        let { top, left } = this.canvas.getBoundingClientRect()\n        this.top = top\n        this.left = left\n    }\n\n    draw() {\n        this.ctx.clearRect(0, 0, this.width, this.height)\n        this.drawFloorBase(this.ctx, floorBaseData, '#00f', '#0ff')\n        this.drawTables(this.ctx, tableData, '#f00', '#0f0')\n    }\n\n    handleClick(e: MouseEvent) {\n        let {clientX, clientY} = e\n        let x = clientX - this.left\n        let y = clientY - this.top\n\n        // let b = isPointInFloor([x, y], floorBaseData)\n        // console.log(b)\n\n        // console.log(isOnTable([x, y], tableData))\n    }\n\n    handleMouseMove(e: MouseEvent) {\n        let {clientX, clientY} = e\n        let x = clientX - this.left\n        let y = clientY - this.top\n        let testTableResult = isOnTable([x, y], tableData)\n        if(testTableResult) {\n            this.selectedTableId = testTableResult.tableid\n        } else {\n            this.selectedTableId = null\n        }\n        this.draw()\n    }\n\n    // 绘制楼层 - 不需要被选中\n    drawFloorBase(ctx: CanvasRenderingContext2D, floorBaseData: IFloorBaseData, strokeStyle: string, fillStyle: string) {\n        let { shape, holes } = floorBaseData\n\n        ctx.strokeStyle = strokeStyle\n        ctx.fillStyle = fillStyle\n\n        // draw line\n        ctx.beginPath()\n        shape.map((s: Point): void => {\n            ctx.lineTo(...s)\n        })\n        ctx.lineTo(...shape[0])\n        ctx.closePath()\n        ctx.fill()\n        ctx.stroke()\n\n        // draw holes\n        holes.map(hole => {\n            ctx.beginPath()\n            ctx.save()\n\n            hole.map((h: Point) => {\n                ctx.lineTo(...h)\n            })\n            ctx.lineTo(...hole[0])\n\n            ctx.clip()\n            ctx.clearRect(0, 0, this.width, this.height)\n            \n            ctx.closePath()\n            ctx.restore()\n            ctx.stroke()\n        })\n    }\n\n    // 绘制座位 - 需要被选中\n    drawTables(ctx: CanvasRenderingContext2D, tableData: ITableData[], strokeStyle: string, fillStyle: string) {\n        tableData.map((td: ITableData) => {\n            let { shape, tableid } = td\n      \n            ctx.strokeStyle = this.selectedTableId===tableid?this.selectColors.tableStroke:strokeStyle\n            ctx.fillStyle = this.selectedTableId===tableid?this.selectColors.tableFill:fillStyle\n            // draw line\n            ctx.beginPath()\n            shape.map((s: Point): void => {\n                ctx.lineTo(...s)\n            })\n            ctx.lineTo(...shape[0])\n            ctx.closePath()\n            ctx.fill()\n            ctx.stroke()\n        })\n    }\n\n    drawRooms(ctx: CanvasRenderingContext2D, roomData: IRoomData[], strokeStyle: string, fillStyle: string) {\n        roomData.map((rd: IRoomData) => {\n            let { shape, roomid } = rd\n\n            ctx.strokeStyle = this.selectedRoomId===roomid?this.selectColors.roomStroke:strokeStyle\n            ctx.fillStyle = this.selectedRoomId===roomid?this.selectColors.roomFill:fillStyle\n            // draw line\n            ctx.beginPath()\n            shape.map((s: Point): void => {\n                ctx.lineTo(...s)\n            })\n            ctx.lineTo(...shape[0])\n            ctx.closePath()\n            ctx.fill()\n            ctx.stroke()\n        })\n    }\n\n    drawBalcany() {\n        \n    }\n\n    setCanvas(width: number, height: number): CanvasRenderingContext2D {\n        this.canvas.style.width = width + 'px'\n        this.canvas.style.height = height + 'px'\n        this.canvas.width = width\n        this.canvas.height = height\n        return this.canvas.getContext('2d') as CanvasRenderingContext2D\n    }\n\n    render() {\n        return <canvas ref={el=>this.canvas = el as HTMLCanvasElement}></canvas>\n    }\n}\n\nexport default Plane"]},"metadata":{},"sourceType":"module"}