{"ast":null,"code":"var simplify = require('simplify-js'); // supported GeoJSON geometries, used to check whether to wrap in simpleFeature()\n\n\nvar supportedTypes = ['LineString', 'MultiLineString', 'Polygon', 'MultiPolygon'];\n/**\n * Takes a {@link LineString} or {@link Polygon} and returns a simplified version. Internally uses [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification.\n *\n * @name simplify\n * @param {Feature<(LineString|Polygon|MultiLineString|MultiPolygon)>|FeatureCollection|GeometryCollection} feature feature to be simplified\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create\n * a higher-quality simplification with a different algorithm\n * @return {Feature<(LineString|Polygon|MultiLineString|MultiPolygon)>|FeatureCollection|GeometryCollection} a simplified feature\n * @example\n  * var feature = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-70.603637, -33.399918],\n *       [-70.614624, -33.395332],\n *       [-70.639343, -33.392466],\n *       [-70.659942, -33.394759],\n *       [-70.683975, -33.404504],\n *       [-70.697021, -33.419406],\n *       [-70.701141, -33.434306],\n *       [-70.700454, -33.446339],\n *       [-70.694274, -33.458369],\n *       [-70.682601, -33.465816],\n *       [-70.668869, -33.472117],\n *       [-70.646209, -33.473835],\n *       [-70.624923, -33.472117],\n *       [-70.609817, -33.468107],\n *       [-70.595397, -33.458369],\n *       [-70.587158, -33.442901],\n *       [-70.587158, -33.426283],\n *       [-70.590591, -33.414248],\n *       [-70.594711, -33.406224],\n *       [-70.603637, -33.399918]\n *     ]]\n *   }\n * };\n\n * var tolerance = 0.01;\n *\n * var simplified = turf.simplify(\n *  feature, tolerance, false);\n *\n * //=feature\n *\n * //=simplified\n */\n\nmodule.exports = function (feature, tolerance, highQuality) {\n  if (feature.type === 'Feature') {\n    return simpleFeature(simplifyHelper(feature, tolerance, highQuality), feature.properties);\n  } else if (feature.type === 'FeatureCollection') {\n    return {\n      type: 'FeatureCollection',\n      features: feature.features.map(function (f) {\n        var simplified = simplifyHelper(f, tolerance, highQuality); // we create simpleFeature here because it doesn't apply to GeometryCollection\n        // so we can't create it at simplifyHelper()\n\n        if (supportedTypes.indexOf(simplified.type) > -1) {\n          return simpleFeature(simplified, f.properties);\n        } else {\n          return simplified;\n        }\n      })\n    };\n  } else if (feature.type === 'GeometryCollection') {\n    return {\n      type: 'GeometryCollection',\n      geometries: feature.geometries.map(function (g) {\n        if (supportedTypes.indexOf(g.type) > -1) {\n          return simplifyHelper({\n            type: 'Feature',\n            geometry: g\n          }, tolerance, highQuality);\n        }\n\n        return g;\n      })\n    };\n  } else {\n    return feature;\n  }\n};\n\nfunction simplifyHelper(feature, tolerance, highQuality) {\n  if (feature.geometry.type === 'LineString') {\n    return {\n      type: 'LineString',\n      coordinates: simplifyLine(feature.geometry.coordinates, tolerance, highQuality)\n    };\n  } else if (feature.geometry.type === 'MultiLineString') {\n    return {\n      type: 'MultiLineString',\n      coordinates: feature.geometry.coordinates.map(function (lines) {\n        return simplifyLine(lines, tolerance, highQuality);\n      })\n    };\n  } else if (feature.geometry.type === 'Polygon') {\n    return {\n      type: 'Polygon',\n      coordinates: simplifyPolygon(feature.geometry.coordinates, tolerance, highQuality)\n    };\n  } else if (feature.geometry.type === 'MultiPolygon') {\n    return {\n      type: 'MultiPolygon',\n      coordinates: feature.geometry.coordinates.map(function (rings) {\n        return simplifyPolygon(rings, tolerance, highQuality);\n      })\n    };\n  } else {\n    // unsupported geometry type supplied\n    return feature;\n  }\n}\n/*\n* returns true if ring's first coordinate is the same as its last\n*/\n\n\nfunction checkValidity(ring) {\n  if (ring.length < 3) {\n    return false; //if the last point is the same as the first, it's not a triangle\n  } else if (ring.length === 3 && ring[2][0] === ring[0][0] && ring[2][1] === ring[0][1]) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction simpleFeature(geom, properties) {\n  return {\n    type: 'Feature',\n    geometry: geom,\n    properties: properties\n  };\n}\n\nfunction simplifyLine(coordinates, tolerance, highQuality) {\n  return simplify(coordinates.map(function (coord) {\n    return {\n      x: coord[0],\n      y: coord[1]\n    };\n  }), tolerance, highQuality).map(function (coords) {\n    return [coords.x, coords.y];\n  });\n}\n\nfunction simplifyPolygon(coordinates, tolerance, highQuality) {\n  return coordinates.map(function (ring) {\n    var pts = ring.map(function (coord) {\n      return {\n        x: coord[0],\n        y: coord[1]\n      };\n    });\n\n    if (pts.length < 4) {\n      throw new Error('Invalid polygon');\n    }\n\n    var simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {\n      return [coords.x, coords.y];\n    }); //remove 1 percent of tolerance until enough points to make a triangle\n\n    while (!checkValidity(simpleRing)) {\n      tolerance -= tolerance * 0.01;\n      simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {\n        return [coords.x, coords.y];\n      });\n    }\n\n    if (simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0] || simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1]) {\n      simpleRing.push(simpleRing[0]);\n    }\n\n    return simpleRing;\n  });\n}","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-simplify/index.js"],"names":["simplify","require","supportedTypes","module","exports","feature","tolerance","highQuality","type","simpleFeature","simplifyHelper","properties","features","map","f","simplified","indexOf","geometries","g","geometry","coordinates","simplifyLine","lines","simplifyPolygon","rings","checkValidity","ring","length","geom","coord","x","y","coords","pts","Error","simpleRing","push"],"mappings":"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","sourcesContent":["var simplify = require('simplify-js');\n\n// supported GeoJSON geometries, used to check whether to wrap in simpleFeature()\nvar supportedTypes = ['LineString', 'MultiLineString', 'Polygon', 'MultiPolygon'];\n\n/**\n * Takes a {@link LineString} or {@link Polygon} and returns a simplified version. Internally uses [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification.\n *\n * @name simplify\n * @param {Feature<(LineString|Polygon|MultiLineString|MultiPolygon)>|FeatureCollection|GeometryCollection} feature feature to be simplified\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create\n * a higher-quality simplification with a different algorithm\n * @return {Feature<(LineString|Polygon|MultiLineString|MultiPolygon)>|FeatureCollection|GeometryCollection} a simplified feature\n * @example\n  * var feature = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-70.603637, -33.399918],\n *       [-70.614624, -33.395332],\n *       [-70.639343, -33.392466],\n *       [-70.659942, -33.394759],\n *       [-70.683975, -33.404504],\n *       [-70.697021, -33.419406],\n *       [-70.701141, -33.434306],\n *       [-70.700454, -33.446339],\n *       [-70.694274, -33.458369],\n *       [-70.682601, -33.465816],\n *       [-70.668869, -33.472117],\n *       [-70.646209, -33.473835],\n *       [-70.624923, -33.472117],\n *       [-70.609817, -33.468107],\n *       [-70.595397, -33.458369],\n *       [-70.587158, -33.442901],\n *       [-70.587158, -33.426283],\n *       [-70.590591, -33.414248],\n *       [-70.594711, -33.406224],\n *       [-70.603637, -33.399918]\n *     ]]\n *   }\n * };\n\n * var tolerance = 0.01;\n *\n * var simplified = turf.simplify(\n *  feature, tolerance, false);\n *\n * //=feature\n *\n * //=simplified\n */\nmodule.exports = function (feature, tolerance, highQuality) {\n    if (feature.type === 'Feature') {\n        return simpleFeature(\n            simplifyHelper(feature, tolerance, highQuality),\n            feature.properties);\n    } else if (feature.type === 'FeatureCollection') {\n        return {\n            type: 'FeatureCollection',\n            features: feature.features.map(function (f) {\n                var simplified = simplifyHelper(f, tolerance, highQuality);\n\n                // we create simpleFeature here because it doesn't apply to GeometryCollection\n                // so we can't create it at simplifyHelper()\n                if (supportedTypes.indexOf(simplified.type) > -1) {\n                    return simpleFeature(simplified, f.properties);\n                } else {\n                    return simplified;\n                }\n            })\n        };\n    } else if (feature.type === 'GeometryCollection') {\n        return {\n            type: 'GeometryCollection',\n            geometries: feature.geometries.map(function (g) {\n                if (supportedTypes.indexOf(g.type) > -1) {\n                    return simplifyHelper({\n                        type: 'Feature',\n                        geometry: g\n                    }, tolerance, highQuality);\n                }\n                return g;\n            })\n        };\n    } else {\n        return feature;\n    }\n};\n\n\nfunction simplifyHelper(feature, tolerance, highQuality) {\n    if (feature.geometry.type === 'LineString') {\n        return {\n            type: 'LineString',\n            coordinates: simplifyLine(feature.geometry.coordinates, tolerance, highQuality)\n        };\n    } else if (feature.geometry.type === 'MultiLineString') {\n        return {\n            type: 'MultiLineString',\n            coordinates: feature.geometry.coordinates.map(function (lines) {\n                return simplifyLine(lines, tolerance, highQuality);\n            })\n        };\n    } else if (feature.geometry.type === 'Polygon') {\n        return {\n            type: 'Polygon',\n            coordinates: simplifyPolygon(feature.geometry.coordinates, tolerance, highQuality)\n        };\n    } else if (feature.geometry.type === 'MultiPolygon') {\n        return {\n            type: 'MultiPolygon',\n            coordinates: feature.geometry.coordinates.map(function (rings) {\n                return simplifyPolygon(rings, tolerance, highQuality);\n            })\n        };\n    } else {\n        // unsupported geometry type supplied\n        return feature;\n    }\n}\n\n/*\n* returns true if ring's first coordinate is the same as its last\n*/\nfunction checkValidity(ring) {\n    if (ring.length < 3) {\n        return false;\n    //if the last point is the same as the first, it's not a triangle\n    } else if (ring.length === 3 &&\n      ((ring[2][0] === ring[0][0]) && (ring[2][1] === ring[0][1]))) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction simpleFeature(geom, properties) {\n    return {\n        type: 'Feature',\n        geometry: geom,\n        properties: properties\n    };\n}\n\nfunction simplifyLine(coordinates, tolerance, highQuality) {\n    return simplify(coordinates.map(function (coord) {\n        return {x: coord[0], y: coord[1]};\n    }), tolerance, highQuality).map(function (coords) {\n        return [coords.x, coords.y];\n    });\n}\n\nfunction simplifyPolygon(coordinates, tolerance, highQuality) {\n    return coordinates.map(function (ring) {\n        var pts = ring.map(function (coord) {\n            return {x: coord[0], y: coord[1]};\n        });\n        if (pts.length < 4) {\n            throw new Error('Invalid polygon');\n        }\n        var simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {\n            return [coords.x, coords.y];\n        });\n        //remove 1 percent of tolerance until enough points to make a triangle\n        while (!checkValidity(simpleRing)) {\n            tolerance -= tolerance * 0.01;\n            simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {\n                return [coords.x, coords.y];\n            });\n        }\n        if (\n            (simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0]) ||\n                (simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1])) {\n            simpleRing.push(simpleRing[0]);\n        }\n        return simpleRing;\n    });\n}\n"]},"metadata":{},"sourceType":"script"}