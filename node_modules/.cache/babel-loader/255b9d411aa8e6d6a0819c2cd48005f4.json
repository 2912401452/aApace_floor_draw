{"ast":null,"code":"var polygon = require('turf-helpers').polygon;\n\nvar earcut = require('earcut');\n/**\n * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles\n * using [earcut](https://github.com/mapbox/earcut).\n *\n * @name tesselate\n * @param {Feature<Polygon>} polygon the polygon to tesselate\n * @returns {FeatureCollection<Polygon>} a geometrycollection feature\n * @example\n * var polygon = {\"type\":\"Feature\",\"id\":\"USA-CA\",\"properties\":{\"name\":\"California\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-123.233256,42.006186],[-122.378853,42.011663],[-121.037003,41.995232],[-120.001861,41.995232],[-119.996384,40.264519],[-120.001861,38.999346],[-118.71478,38.101128],[-117.498899,37.21934],[-116.540435,36.501861],[-115.85034,35.970598],[-114.634459,35.00118],[-114.634459,34.87521],[-114.470151,34.710902],[-114.333228,34.448009],[-114.136058,34.305608],[-114.256551,34.174162],[-114.415382,34.108438],[-114.535874,33.933176],[-114.497536,33.697668],[-114.524921,33.54979],[-114.727567,33.40739],[-114.661844,33.034958],[-114.524921,33.029481],[-114.470151,32.843265],[-114.524921,32.755634],[-114.72209,32.717295],[-116.04751,32.624187],[-117.126467,32.536556],[-117.24696,32.668003],[-117.252437,32.876127],[-117.329114,33.122589],[-117.471515,33.297851],[-117.7837,33.538836],[-118.183517,33.763391],[-118.260194,33.703145],[-118.413548,33.741483],[-118.391641,33.840068],[-118.566903,34.042715],[-118.802411,33.998899],[-119.218659,34.146777],[-119.278905,34.26727],[-119.558229,34.415147],[-119.875891,34.40967],[-120.138784,34.475393],[-120.472878,34.448009],[-120.64814,34.579455],[-120.609801,34.858779],[-120.670048,34.902595],[-120.631709,35.099764],[-120.894602,35.247642],[-120.905556,35.450289],[-121.004141,35.461243],[-121.168449,35.636505],[-121.283465,35.674843],[-121.332757,35.784382],[-121.716143,36.195153],[-121.896882,36.315645],[-121.935221,36.638785],[-121.858544,36.6114],[-121.787344,36.803093],[-121.929744,36.978355],[-122.105006,36.956447],[-122.335038,37.115279],[-122.417192,37.241248],[-122.400761,37.361741],[-122.515777,37.520572],[-122.515777,37.783465],[-122.329561,37.783465],[-122.406238,38.15042],[-122.488392,38.112082],[-122.504823,37.931343],[-122.701993,37.893004],[-122.937501,38.029928],[-122.97584,38.265436],[-123.129194,38.451652],[-123.331841,38.566668],[-123.44138,38.698114],[-123.737134,38.95553],[-123.687842,39.032208],[-123.824765,39.366301],[-123.764519,39.552517],[-123.85215,39.831841],[-124.109566,40.105688],[-124.361506,40.259042],[-124.410798,40.439781],[-124.158859,40.877937],[-124.109566,41.025814],[-124.158859,41.14083],[-124.065751,41.442061],[-124.147905,41.715908],[-124.257444,41.781632],[-124.213628,42.000709],[-123.233256,42.006186]]]}};\n *\n * var triangles = turf.tesselate(polygon);\n *\n * //=triangles\n */\n\n\nmodule.exports = function (poly) {\n  if (!poly.geometry || poly.geometry.type !== 'Polygon' && poly.geometry.type !== 'MultiPolygon') {\n    throw new Error('input must be a Polygon or MultiPolygon');\n  }\n\n  var fc = {\n    type: 'FeatureCollection',\n    features: []\n  };\n\n  if (poly.geometry.type === 'Polygon') {\n    fc.features = processPolygon(poly.geometry.coordinates);\n  } else {\n    poly.geometry.coordinates.forEach(function (coordinates) {\n      fc.features = fc.features.concat(processPolygon(coordinates));\n    });\n  }\n\n  return fc;\n};\n\nfunction processPolygon(coordinates) {\n  var data = flattenCoords(coordinates);\n  var dim = 2;\n  var result = earcut(data.vertices, data.holes, dim);\n  var features = [];\n  var vertices = [];\n  result.forEach(function (vert, i) {\n    var index = result[i];\n    vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n  });\n\n  for (var i = 0; i < vertices.length; i += 3) {\n    var coords = vertices.slice(i, i + 3);\n    coords.push(vertices[i]);\n    features.push(polygon([coords]));\n  }\n\n  return features;\n}\n\nfunction flattenCoords(data) {\n  var dim = data[0][0].length,\n      result = {\n    vertices: [],\n    holes: [],\n    dimensions: dim\n  },\n      holeIndex = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-tesselate/index.js"],"names":["polygon","require","earcut","module","exports","poly","geometry","type","Error","fc","features","processPolygon","coordinates","forEach","concat","data","flattenCoords","dim","result","vertices","holes","vert","i","index","push","length","coords","slice","dimensions","holeIndex","j","d"],"mappings":"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","sourcesContent":["var polygon = require('turf-helpers').polygon;\nvar earcut = require('earcut');\n\n/**\n * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles\n * using [earcut](https://github.com/mapbox/earcut).\n *\n * @name tesselate\n * @param {Feature<Polygon>} polygon the polygon to tesselate\n * @returns {FeatureCollection<Polygon>} a geometrycollection feature\n * @example\n * var polygon = {\"type\":\"Feature\",\"id\":\"USA-CA\",\"properties\":{\"name\":\"California\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-123.233256,42.006186],[-122.378853,42.011663],[-121.037003,41.995232],[-120.001861,41.995232],[-119.996384,40.264519],[-120.001861,38.999346],[-118.71478,38.101128],[-117.498899,37.21934],[-116.540435,36.501861],[-115.85034,35.970598],[-114.634459,35.00118],[-114.634459,34.87521],[-114.470151,34.710902],[-114.333228,34.448009],[-114.136058,34.305608],[-114.256551,34.174162],[-114.415382,34.108438],[-114.535874,33.933176],[-114.497536,33.697668],[-114.524921,33.54979],[-114.727567,33.40739],[-114.661844,33.034958],[-114.524921,33.029481],[-114.470151,32.843265],[-114.524921,32.755634],[-114.72209,32.717295],[-116.04751,32.624187],[-117.126467,32.536556],[-117.24696,32.668003],[-117.252437,32.876127],[-117.329114,33.122589],[-117.471515,33.297851],[-117.7837,33.538836],[-118.183517,33.763391],[-118.260194,33.703145],[-118.413548,33.741483],[-118.391641,33.840068],[-118.566903,34.042715],[-118.802411,33.998899],[-119.218659,34.146777],[-119.278905,34.26727],[-119.558229,34.415147],[-119.875891,34.40967],[-120.138784,34.475393],[-120.472878,34.448009],[-120.64814,34.579455],[-120.609801,34.858779],[-120.670048,34.902595],[-120.631709,35.099764],[-120.894602,35.247642],[-120.905556,35.450289],[-121.004141,35.461243],[-121.168449,35.636505],[-121.283465,35.674843],[-121.332757,35.784382],[-121.716143,36.195153],[-121.896882,36.315645],[-121.935221,36.638785],[-121.858544,36.6114],[-121.787344,36.803093],[-121.929744,36.978355],[-122.105006,36.956447],[-122.335038,37.115279],[-122.417192,37.241248],[-122.400761,37.361741],[-122.515777,37.520572],[-122.515777,37.783465],[-122.329561,37.783465],[-122.406238,38.15042],[-122.488392,38.112082],[-122.504823,37.931343],[-122.701993,37.893004],[-122.937501,38.029928],[-122.97584,38.265436],[-123.129194,38.451652],[-123.331841,38.566668],[-123.44138,38.698114],[-123.737134,38.95553],[-123.687842,39.032208],[-123.824765,39.366301],[-123.764519,39.552517],[-123.85215,39.831841],[-124.109566,40.105688],[-124.361506,40.259042],[-124.410798,40.439781],[-124.158859,40.877937],[-124.109566,41.025814],[-124.158859,41.14083],[-124.065751,41.442061],[-124.147905,41.715908],[-124.257444,41.781632],[-124.213628,42.000709],[-123.233256,42.006186]]]}};\n *\n * var triangles = turf.tesselate(polygon);\n *\n * //=triangles\n */\n\nmodule.exports = function (poly) {\n    if (!poly.geometry || (poly.geometry.type !== 'Polygon' && poly.geometry.type !== 'MultiPolygon')) {\n        throw new Error('input must be a Polygon or MultiPolygon');\n    }\n\n    var fc = {type: 'FeatureCollection', features: []};\n\n    if (poly.geometry.type === 'Polygon') {\n        fc.features = processPolygon(poly.geometry.coordinates);\n    } else {\n        poly.geometry.coordinates.forEach(function (coordinates) {\n            fc.features = fc.features.concat(processPolygon(coordinates));\n        });\n    }\n\n    return fc;\n};\n\nfunction processPolygon(coordinates) {\n    var data = flattenCoords(coordinates);\n    var dim = 2;\n    var result = earcut(data.vertices, data.holes, dim);\n\n    var features = [];\n    var vertices = [];\n\n    result.forEach(function (vert, i) {\n        var index = result[i];\n        vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n    });\n\n    for (var i = 0; i < vertices.length; i += 3) {\n        var coords = vertices.slice(i, i + 3);\n        coords.push(vertices[i]);\n        features.push(polygon([coords]));\n    }\n\n    return features;\n}\n\nfunction flattenCoords(data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n\n    return result;\n}\n"]},"metadata":{},"sourceType":"script"}