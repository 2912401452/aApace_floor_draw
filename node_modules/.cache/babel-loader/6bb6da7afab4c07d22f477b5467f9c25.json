{"ast":null,"code":"// http://stackoverflow.com/questions/839899/how-do-i-calculate-a-point-on-a-circles-circumference\n// radians = degrees * (pi/180)\n// https://github.com/bjornharrtell/jsts/blob/master/examples/buffer.html\nvar helpers = require('turf-helpers');\n\nvar featureCollection = helpers.featureCollection;\n\nvar jsts = require('jsts');\n\nvar normalize = require('geojson-normalize');\n/**\n * Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.\n *\n * @name buffer\n * @param {(Feature|FeatureCollection)} feature input to be buffered\n * @param {number} distance distance to draw the buffer\n * @param {string} unit any of the options supported by turf units\n * @return {FeatureCollection<Polygon>|FeatureCollection<MultiPolygon>|Polygon|MultiPolygon} buffered features\n *\n * @example\n * var pt = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-90.548630, 14.616599]\n *   }\n * };\n * var unit = 'miles';\n *\n * var buffered = turf.buffer(pt, 500, unit);\n * var result = turf.featurecollection([buffered, pt]);\n *\n * //=result\n */\n\n\nmodule.exports = function (feature, radius, units) {\n  var degrees = helpers.distanceToDegrees(radius, units);\n  var fc = normalize(feature);\n  var buffered = normalize(featureCollection(fc.features.map(function (f) {\n    return bufferOp(f, degrees);\n  })));\n  if (buffered.features.length > 1) return buffered;else if (buffered.features.length === 1) return buffered.features[0];\n};\n\nfunction bufferOp(feature, radius) {\n  var reader = new jsts.io.GeoJSONReader();\n  var geom = reader.read(feature.geometry);\n  var buffered = geom.buffer(radius);\n  var writer = new jsts.io.GeoJSONWriter();\n  buffered = writer.write(buffered);\n  return {\n    type: 'Feature',\n    geometry: buffered,\n    properties: {}\n  };\n}","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-buffer/index.js"],"names":["helpers","require","featureCollection","jsts","normalize","module","exports","feature","radius","units","degrees","distanceToDegrees","fc","buffered","features","map","f","bufferOp","length","reader","io","GeoJSONReader","geom","read","geometry","buffer","writer","GeoJSONWriter","write","type","properties"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIC,iBAAiB,GAAGF,OAAO,CAACE,iBAAhC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,mBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2BC,KAA3B,EAAkC;AAE/C,MAAIC,OAAO,GAAGV,OAAO,CAACW,iBAAR,CAA0BH,MAA1B,EAAkCC,KAAlC,CAAd;AACA,MAAIG,EAAE,GAAGR,SAAS,CAACG,OAAD,CAAlB;AACA,MAAIM,QAAQ,GAAGT,SAAS,CAACF,iBAAiB,CAACU,EAAE,CAACE,QAAH,CAAYC,GAAZ,CAAgB,UAAUC,CAAV,EAAa;AACpE,WAAOC,QAAQ,CAACD,CAAD,EAAIN,OAAJ,CAAf;AACH,GAF0C,CAAD,CAAlB,CAAxB;AAIA,MAAIG,QAAQ,CAACC,QAAT,CAAkBI,MAAlB,GAA2B,CAA/B,EAAkC,OAAOL,QAAP,CAAlC,KACK,IAAIA,QAAQ,CAACC,QAAT,CAAkBI,MAAlB,KAA6B,CAAjC,EAAoC,OAAOL,QAAQ,CAACC,QAAT,CAAkB,CAAlB,CAAP;AAC5C,CAVD;;AAYA,SAASG,QAAT,CAAkBV,OAAlB,EAA2BC,MAA3B,EAAmC;AAC/B,MAAIW,MAAM,GAAG,IAAIhB,IAAI,CAACiB,EAAL,CAAQC,aAAZ,EAAb;AACA,MAAIC,IAAI,GAAGH,MAAM,CAACI,IAAP,CAAYhB,OAAO,CAACiB,QAApB,CAAX;AACA,MAAIX,QAAQ,GAAGS,IAAI,CAACG,MAAL,CAAYjB,MAAZ,CAAf;AACA,MAAIkB,MAAM,GAAG,IAAIvB,IAAI,CAACiB,EAAL,CAAQO,aAAZ,EAAb;AACAd,EAAAA,QAAQ,GAAGa,MAAM,CAACE,KAAP,CAAaf,QAAb,CAAX;AAEA,SAAO;AACHgB,IAAAA,IAAI,EAAE,SADH;AAEHL,IAAAA,QAAQ,EAAEX,QAFP;AAGHiB,IAAAA,UAAU,EAAE;AAHT,GAAP;AAKH","sourcesContent":["// http://stackoverflow.com/questions/839899/how-do-i-calculate-a-point-on-a-circles-circumference\n// radians = degrees * (pi/180)\n// https://github.com/bjornharrtell/jsts/blob/master/examples/buffer.html\n\nvar helpers = require('turf-helpers');\nvar featureCollection = helpers.featureCollection;\nvar jsts = require('jsts');\nvar normalize = require('geojson-normalize');\n\n/**\n * Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.\n *\n * @name buffer\n * @param {(Feature|FeatureCollection)} feature input to be buffered\n * @param {number} distance distance to draw the buffer\n * @param {string} unit any of the options supported by turf units\n * @return {FeatureCollection<Polygon>|FeatureCollection<MultiPolygon>|Polygon|MultiPolygon} buffered features\n *\n * @example\n * var pt = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-90.548630, 14.616599]\n *   }\n * };\n * var unit = 'miles';\n *\n * var buffered = turf.buffer(pt, 500, unit);\n * var result = turf.featurecollection([buffered, pt]);\n *\n * //=result\n */\n\nmodule.exports = function (feature, radius, units) {\n\n    var degrees = helpers.distanceToDegrees(radius, units);\n    var fc = normalize(feature);\n    var buffered = normalize(featureCollection(fc.features.map(function (f) {\n        return bufferOp(f, degrees);\n    })));\n\n    if (buffered.features.length > 1) return buffered;\n    else if (buffered.features.length === 1) return buffered.features[0];\n};\n\nfunction bufferOp(feature, radius) {\n    var reader = new jsts.io.GeoJSONReader();\n    var geom = reader.read(feature.geometry);\n    var buffered = geom.buffer(radius);\n    var writer = new jsts.io.GeoJSONWriter();\n    buffered = writer.write(buffered);\n\n    return {\n        type: 'Feature',\n        geometry: buffered,\n        properties: {}\n    };\n}\n"]},"metadata":{},"sourceType":"script"}