{"ast":null,"code":"import { isPointInPolygon } from './math';\n/**\n * 判断点是否在楼梯内部\n * @param point \n * @param floorBaseData \n * @returns \n */\n\nfunction isPointInFloor(point, floorBaseData) {\n  let {\n    shape,\n    holes\n  } = floorBaseData;\n\n  for (let i = 0; i < holes.length; i++) {\n    let hole = holes[i];\n\n    if (isPointInPolygon(point, hole)) {\n      return false;\n    }\n  }\n\n  if (isPointInPolygon(point, shape)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isOnTable(point, tables) {\n  for (let i = 0; i < tables.length; i++) {\n    let table = tables[i];\n    let {\n      shape\n    } = table;\n\n    if (isPointInPolygon(point, shape)) {\n      return table;\n    }\n  }\n\n  return null;\n}\n\nfunction isOnRoom(point, rooms) {\n  for (let i = 0; i < rooms.length; i++) {\n    let table = rooms[i];\n    let {\n      shape\n    } = table;\n\n    if (isPointInPolygon(point, shape)) {\n      return table;\n    }\n  }\n\n  return null;\n}\n\nfunction getDrawTableData(data) {\n  return false;\n}\n\nexport { getDrawTableData, isPointInFloor, isOnTable, isOnRoom };","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/src/components/utils.ts"],"names":["isPointInPolygon","isPointInFloor","point","floorBaseData","shape","holes","i","length","hole","isOnTable","tables","table","isOnRoom","rooms","getDrawTableData","data"],"mappings":"AACA,SAASA,gBAAT,QAAiC,QAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAAsCC,aAAtC,EAA8E;AAC1E,MAAI;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBF,aAAvB;;AACA,OAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAK,CAACE,MAAzB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIE,IAAW,GAAGH,KAAK,CAACC,CAAD,CAAvB;;AACA,QAAGN,gBAAgB,CAACE,KAAD,EAAQM,IAAR,CAAnB,EAAkC;AAC9B,aAAO,KAAP;AACH;AACJ;;AACD,MAAGR,gBAAgB,CAACE,KAAD,EAAQE,KAAR,CAAnB,EAAmC;AAC/B,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ;;AAED,SAASK,SAAT,CAAmBP,KAAnB,EAAiCQ,MAAjC,EAAwE;AACpE,OAAI,IAAIJ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGI,MAAM,CAACH,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIK,KAAK,GAAGD,MAAM,CAACJ,CAAD,CAAlB;AACA,QAAI;AAAEF,MAAAA;AAAF,QAAYO,KAAhB;;AACA,QAAGX,gBAAgB,CAACE,KAAD,EAAQE,KAAR,CAAnB,EAAmC;AAC/B,aAAOO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;;AAED,SAASC,QAAT,CAAkBV,KAAlB,EAAgCW,KAAhC,EAAoE;AAChE,OAAI,IAAIP,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGO,KAAK,CAACN,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIK,KAAK,GAAGE,KAAK,CAACP,CAAD,CAAjB;AACA,QAAI;AAAEF,MAAAA;AAAF,QAAYO,KAAhB;;AACA,QAAGX,gBAAgB,CAACE,KAAD,EAAQE,KAAR,CAAnB,EAAmC;AAC/B,aAAOO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;;AAED,SAASG,gBAAT,CAA0BC,IAA1B,EAAuD;AACnD,SAAO,KAAP;AACH;;AAED,SACID,gBADJ,EAEIb,cAFJ,EAGIQ,SAHJ,EAIIG,QAJJ","sourcesContent":["import { ITableData, Point, IHole, IFloorBaseData, IRoomData } from './IInterface'\nimport { isPointInPolygon } from './math'\n\n/**\n * 判断点是否在楼梯内部\n * @param point \n * @param floorBaseData \n * @returns \n */\nfunction isPointInFloor(point: Point, floorBaseData: IFloorBaseData): boolean {\n    let { shape, holes } = floorBaseData\n    for(let i = 0; i < holes.length;i++) {\n        let hole: IHole = holes[i]\n        if(isPointInPolygon(point, hole)) {\n            return false\n        }\n    }\n    if(isPointInPolygon(point, shape)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunction isOnTable(point: Point, tables: ITableData[]): ITableData|null {\n    for(let i = 0; i < tables.length; i++) {\n        let table = tables[i]\n        let { shape } = table\n        if(isPointInPolygon(point, shape)) {\n            return table\n        }\n    }\n    return null\n}\n\nfunction isOnRoom(point: Point, rooms: IRoomData[]): IRoomData|null {\n    for(let i = 0; i < rooms.length; i++) {\n        let table = rooms[i]\n        let { shape } = table\n        if(isPointInPolygon(point, shape)) {\n            return table\n        }\n    }\n    return null\n}\n\nfunction getDrawTableData(data: ITableData[]): boolean {\n    return false\n}\n\nexport {\n    getDrawTableData,\n    isPointInFloor,\n    isOnTable,\n    isOnRoom\n}"]},"metadata":{},"sourceType":"module"}