{"ast":null,"code":"var distance = require('turf-distance');\n\nvar point = require('turf-helpers').point;\n/**\n * Takes a {@link LineString|line} and measures its length in the specified units.\n *\n * @name lineDistance\n * @param {Feature<LineString>} line line to measure\n * @param {String} [units=kilometers] can be degrees, radians, miles, or kilometers\n * @return {Number} length of the input line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var length = turf.lineDistance(line, 'miles');\n *\n * //=line\n *\n * //=length\n */\n\n\nmodule.exports = function lineDistance(line, units) {\n  if (line.type === 'FeatureCollection') {\n    return line.features.reduce(function (memo, feature) {\n      return memo + lineDistance(feature, units);\n    }, 0);\n  }\n\n  var geometry = line.type === 'Feature' ? line.geometry : line;\n  var d, i;\n\n  if (geometry.type === 'LineString') {\n    return length(geometry.coordinates, units);\n  } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n    d = 0;\n\n    for (i = 0; i < geometry.coordinates.length; i++) {\n      d += length(geometry.coordinates[i], units);\n    }\n\n    return d;\n  } else if (line.type === 'MultiPolygon') {\n    d = 0;\n\n    for (i = 0; i < geometry.coordinates.length; i++) {\n      for (var j = 0; j < geometry.coordinates[i].length; j++) {\n        d += length(geometry.coordinates[i][j], units);\n      }\n    }\n\n    return d;\n  } else {\n    throw new Error('input must be a LineString, MultiLineString, ' + 'Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection ' + 'containing only those types)');\n  }\n};\n\nfunction length(coords, units) {\n  var travelled = 0;\n  var prevCoords = point(coords[0]);\n  var curCoords = point(coords[0]);\n  var temp;\n\n  for (var i = 1; i < coords.length; i++) {\n    curCoords.geometry.coordinates = coords[i];\n    travelled += distance(prevCoords, curCoords, units);\n    temp = prevCoords;\n    prevCoords = curCoords;\n    curCoords = temp;\n  }\n\n  return travelled;\n}","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/aApace_floor_draw/node_modules/turf-line-distance/index.js"],"names":["distance","require","point","module","exports","lineDistance","line","units","type","features","reduce","memo","feature","geometry","d","i","length","coordinates","j","Error","coords","travelled","prevCoords","curCoords","temp"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBC,KAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AAChD,MAAID,IAAI,CAACE,IAAL,KAAc,mBAAlB,EAAuC;AACnC,WAAOF,IAAI,CAACG,QAAL,CAAcC,MAAd,CAAqB,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACjD,aAAOD,IAAI,GAAGN,YAAY,CAACO,OAAD,EAAUL,KAAV,CAA1B;AACH,KAFM,EAEJ,CAFI,CAAP;AAGH;;AAED,MAAIM,QAAQ,GAAGP,IAAI,CAACE,IAAL,KAAc,SAAd,GAA0BF,IAAI,CAACO,QAA/B,GAA0CP,IAAzD;AACA,MAAIQ,CAAJ,EAAOC,CAAP;;AAEA,MAAIF,QAAQ,CAACL,IAAT,KAAkB,YAAtB,EAAoC;AAChC,WAAOQ,MAAM,CAACH,QAAQ,CAACI,WAAV,EAAuBV,KAAvB,CAAb;AACH,GAFD,MAEO,IAAIM,QAAQ,CAACL,IAAT,KAAkB,SAAlB,IAA+BK,QAAQ,CAACL,IAAT,KAAkB,iBAArD,EAAwE;AAC3EM,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,QAAQ,CAACI,WAAT,CAAqBD,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9CD,MAAAA,CAAC,IAAIE,MAAM,CAACH,QAAQ,CAACI,WAAT,CAAqBF,CAArB,CAAD,EAA0BR,KAA1B,CAAX;AACH;;AACD,WAAOO,CAAP;AACH,GANM,MAMA,IAAIR,IAAI,CAACE,IAAL,KAAc,cAAlB,EAAkC;AACrCM,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,QAAQ,CAACI,WAAT,CAAqBD,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACI,WAAT,CAAqBF,CAArB,EAAwBC,MAA5C,EAAoDE,CAAC,EAArD,EAAyD;AACrDJ,QAAAA,CAAC,IAAIE,MAAM,CAACH,QAAQ,CAACI,WAAT,CAAqBF,CAArB,EAAwBG,CAAxB,CAAD,EAA6BX,KAA7B,CAAX;AACH;AACJ;;AACD,WAAOO,CAAP;AACH,GARM,MAQA;AACH,UAAM,IAAIK,KAAJ,CAAU,kDACZ,uEADY,GAEZ,8BAFE,CAAN;AAGH;AAEJ,CAhCD;;AAkCA,SAASH,MAAT,CAAgBI,MAAhB,EAAwBb,KAAxB,EAA+B;AAC3B,MAAIc,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAGpB,KAAK,CAACkB,MAAM,CAAC,CAAD,CAAP,CAAtB;AACA,MAAIG,SAAS,GAAGrB,KAAK,CAACkB,MAAM,CAAC,CAAD,CAAP,CAArB;AACA,MAAII,IAAJ;;AACA,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,MAAM,CAACJ,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpCQ,IAAAA,SAAS,CAACV,QAAV,CAAmBI,WAAnB,GAAiCG,MAAM,CAACL,CAAD,CAAvC;AACAM,IAAAA,SAAS,IAAIrB,QAAQ,CAACsB,UAAD,EAAaC,SAAb,EAAwBhB,KAAxB,CAArB;AACAiB,IAAAA,IAAI,GAAGF,UAAP;AACAA,IAAAA,UAAU,GAAGC,SAAb;AACAA,IAAAA,SAAS,GAAGC,IAAZ;AACH;;AACD,SAAOH,SAAP;AACH","sourcesContent":["var distance = require('turf-distance');\nvar point = require('turf-helpers').point;\n\n/**\n * Takes a {@link LineString|line} and measures its length in the specified units.\n *\n * @name lineDistance\n * @param {Feature<LineString>} line line to measure\n * @param {String} [units=kilometers] can be degrees, radians, miles, or kilometers\n * @return {Number} length of the input line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var length = turf.lineDistance(line, 'miles');\n *\n * //=line\n *\n * //=length\n */\nmodule.exports = function lineDistance(line, units) {\n    if (line.type === 'FeatureCollection') {\n        return line.features.reduce(function (memo, feature) {\n            return memo + lineDistance(feature, units);\n        }, 0);\n    }\n\n    var geometry = line.type === 'Feature' ? line.geometry : line;\n    var d, i;\n\n    if (geometry.type === 'LineString') {\n        return length(geometry.coordinates, units);\n    } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n        d = 0;\n        for (i = 0; i < geometry.coordinates.length; i++) {\n            d += length(geometry.coordinates[i], units);\n        }\n        return d;\n    } else if (line.type === 'MultiPolygon') {\n        d = 0;\n        for (i = 0; i < geometry.coordinates.length; i++) {\n            for (var j = 0; j < geometry.coordinates[i].length; j++) {\n                d += length(geometry.coordinates[i][j], units);\n            }\n        }\n        return d;\n    } else {\n        throw new Error('input must be a LineString, MultiLineString, ' +\n            'Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection ' +\n            'containing only those types)');\n    }\n\n};\n\nfunction length(coords, units) {\n    var travelled = 0;\n    var prevCoords = point(coords[0]);\n    var curCoords = point(coords[0]);\n    var temp;\n    for (var i = 1; i < coords.length; i++) {\n        curCoords.geometry.coordinates = coords[i];\n        travelled += distance(prevCoords, curCoords, units);\n        temp = prevCoords;\n        prevCoords = curCoords;\n        curCoords = temp;\n    }\n    return travelled;\n}\n"]},"metadata":{},"sourceType":"script"}