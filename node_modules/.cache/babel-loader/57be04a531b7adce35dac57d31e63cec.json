{"ast":null,"code":"//https://github.com/jasondavies/conrec.js\n//http://stackoverflow.com/questions/263305/drawing-a-topographical-map\nvar tin = require('turf-tin');\n\nvar inside = require('turf-inside');\n\nvar grid = require('turf-grid');\n\nvar bbox = require('turf-bbox');\n\nvar planepoint = require('turf-planepoint');\n\nvar featurecollection = require('turf-helpers').featureCollection;\n\nvar linestring = require('turf-helpers').lineString;\n\nvar square = require('turf-square');\n\nvar Conrec = require('./conrec');\n/**\n * Takes {@link Point|points} with z-values and an array of\n * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).\n *\n * @name isolines\n * @param {FeatureCollection<Point>} points input points\n * @param {string} z the property name in `points` from which z-values will be pulled\n * @param {number} resolution resolution of the underlying grid\n * @param {Array<number>} breaks where to draw contours\n * @returns {FeatureCollection<LineString>} isolines\n * @example\n * // create random points with random\n * // z-values in their properties\n * var points = turf.random('point', 100, {\n *   bbox: [0, 30, 20, 50]\n * });\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = Math.random() * 10;\n * }\n * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * var isolined = turf.isolines(points, 'z', 15, breaks);\n * //=isolined\n */\n\n\nmodule.exports = function (points, z, resolution, breaks) {\n  var tinResult = tin(points, z);\n  var bboxBBox = bbox(points);\n  var squareBBox = square(bboxBBox);\n  var gridResult = grid(squareBBox, resolution);\n  var data = [];\n\n  for (var i = 0; i < gridResult.features.length; i++) {\n    var pt = gridResult.features[i];\n\n    for (var j = 0; j < tinResult.features.length; j++) {\n      var triangle = tinResult.features[j];\n\n      if (inside(pt, triangle)) {\n        pt.properties = {};\n        pt.properties[z] = planepoint(pt, triangle);\n      }\n    }\n  }\n\n  var depth = Math.sqrt(gridResult.features.length);\n\n  for (var x = 0; x < depth; x++) {\n    var xGroup = gridResult.features.slice(x * depth, (x + 1) * depth);\n    var xFlat = [];\n\n    for (var g = 0; g < xGroup.length; g++) {\n      if (xGroup[g].properties) {\n        xFlat.push(xGroup[g].properties[z]);\n      } else {\n        xFlat.push(0);\n      }\n    }\n\n    data.push(xFlat);\n  }\n\n  var interval = (squareBBox[2] - squareBBox[0]) / depth;\n  var xCoordinates = [];\n  var yCoordinates = [];\n\n  for (var d = 0; d < depth; d++) {\n    xCoordinates.push(d * interval + squareBBox[0]);\n    yCoordinates.push(d * interval + squareBBox[1]);\n  }\n\n  var c = new Conrec();\n  c.contour(data, 0, resolution, 0, resolution, xCoordinates, yCoordinates, breaks.length, breaks);\n  var contourList = c.contourList();\n  var fc = featurecollection([]);\n  contourList.forEach(function (c) {\n    if (c.length > 2) {\n      var polyCoordinates = [];\n      c.forEach(function (coord) {\n        polyCoordinates.push([coord.x, coord.y]);\n      });\n      var poly = linestring(polyCoordinates);\n      poly.properties = {};\n      poly.properties[z] = c.level;\n      fc.features.push(poly);\n    }\n  });\n  return fc;\n};","map":{"version":3,"sources":["/Users/yiqianyao/workspace/something/floorcanvas/node_modules/turf-isolines/index.js"],"names":["tin","require","inside","grid","bbox","planepoint","featurecollection","featureCollection","linestring","lineString","square","Conrec","module","exports","points","z","resolution","breaks","tinResult","bboxBBox","squareBBox","gridResult","data","i","features","length","pt","j","triangle","properties","depth","Math","sqrt","x","xGroup","slice","xFlat","g","push","interval","xCoordinates","yCoordinates","d","c","contour","contourList","fc","forEach","polyCoordinates","coord","y","poly","level"],"mappings":"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","sourcesContent":["//https://github.com/jasondavies/conrec.js\n//http://stackoverflow.com/questions/263305/drawing-a-topographical-map\nvar tin = require('turf-tin');\nvar inside = require('turf-inside');\nvar grid = require('turf-grid');\nvar bbox = require('turf-bbox');\nvar planepoint = require('turf-planepoint');\nvar featurecollection = require('turf-helpers').featureCollection;\nvar linestring = require('turf-helpers').lineString;\nvar square = require('turf-square');\nvar Conrec = require('./conrec');\n\n/**\n * Takes {@link Point|points} with z-values and an array of\n * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).\n *\n * @name isolines\n * @param {FeatureCollection<Point>} points input points\n * @param {string} z the property name in `points` from which z-values will be pulled\n * @param {number} resolution resolution of the underlying grid\n * @param {Array<number>} breaks where to draw contours\n * @returns {FeatureCollection<LineString>} isolines\n * @example\n * // create random points with random\n * // z-values in their properties\n * var points = turf.random('point', 100, {\n *   bbox: [0, 30, 20, 50]\n * });\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = Math.random() * 10;\n * }\n * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * var isolined = turf.isolines(points, 'z', 15, breaks);\n * //=isolined\n */\nmodule.exports = function (points, z, resolution, breaks) {\n    var tinResult = tin(points, z);\n    var bboxBBox = bbox(points);\n    var squareBBox = square(bboxBBox);\n    var gridResult = grid(squareBBox, resolution);\n    var data = [];\n\n    for (var i = 0; i < gridResult.features.length; i++) {\n        var pt = gridResult.features[i];\n        for (var j = 0; j < tinResult.features.length; j++) {\n            var triangle = tinResult.features[j];\n            if (inside(pt, triangle)) {\n                pt.properties = {};\n                pt.properties[z] = planepoint(pt, triangle);\n            }\n        }\n    }\n\n    var depth = Math.sqrt(gridResult.features.length);\n    for (var x = 0; x < depth; x++) {\n        var xGroup = gridResult.features.slice(x * depth, (x + 1) * depth);\n        var xFlat = [];\n\n        for (var g = 0; g < xGroup.length; g++) {\n            if (xGroup[g].properties) {\n                xFlat.push(xGroup[g].properties[z]);\n            } else {\n                xFlat.push(0);\n            }\n        }\n        data.push(xFlat);\n    }\n    var interval = (squareBBox[2] - squareBBox[0]) / depth;\n    var xCoordinates = [];\n    var yCoordinates = [];\n    for (var d = 0; d < depth; d++) {\n        xCoordinates.push(d * interval + squareBBox[0]);\n        yCoordinates.push(d * interval + squareBBox[1]);\n    }\n\n    var c = new Conrec();\n    c.contour(data, 0, resolution, 0, resolution, xCoordinates, yCoordinates, breaks.length, breaks);\n    var contourList = c.contourList();\n\n    var fc = featurecollection([]);\n    contourList.forEach(function (c) {\n        if (c.length > 2) {\n            var polyCoordinates = [];\n            c.forEach(function (coord) {\n                polyCoordinates.push([coord.x, coord.y]);\n            });\n            var poly = linestring(polyCoordinates);\n            poly.properties = {};\n            poly.properties[z] = c.level;\n\n            fc.features.push(poly);\n        }\n    });\n\n    return fc;\n};\n"]},"metadata":{},"sourceType":"script"}